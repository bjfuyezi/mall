{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport AddProductForm from './AddProduct.vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    AddProductForm\n  },\n  data() {\n    return {\n      fileList: [],\n      uploadUrl: 'http://localhost:8081/pic/uploadAndId',\n      user_id: 1,\n      // session获取\n      shop_id: '',\n      showAddProductDialog: false,\n      // 控制弹窗的显示\n      searchKeyword: '',\n      searchType: 'name',\n      // 默认为根据名称搜索\n      searchKeywordNow: '',\n      searchTypeNow: '',\n      // 搜索用\n      deleteDialogVisible: false,\n      productStatus: 'all',\n      // 默认为“全部”状态\n      formattedProductDetails: [],\n      // 用于展示详情和修改\n      deleteProductNow: '',\n      // 用户删除商品\n      dialogInfoVisible: false,\n      // 详情弹窗\n      updateDialogVisible: false,\n      // 更新弹窗\n      updatedProduct: {\n        id: '',\n        name: '',\n        category: '',\n        price: null,\n        description: '',\n        quantity: [],\n        unit: '',\n        notice: '',\n        images: [] // 存储图片信息\n      },\n      categoryMap: {\n        'fresh': '生鲜食品',\n        'snack': '零食小吃',\n        'drink': '酒水饮料',\n        'dry': '干货腌货',\n        'instant': '即食食品',\n        'green': '农产品'\n      },\n      statusMap: {\n        'sale': '售卖中',\n        'empty': '已下架/售罄',\n        'waiting': '审核中',\n        'suspended': '审核未通过'\n      },\n      products: [],\n      currentPage: 1,\n      pageSize: 15,\n      totalItems: 3,\n      // 模拟总商品数\n      addProductDialogVisible: false\n    };\n  },\n  computed: {\n    // 过滤后的商品列表\n    filteredProducts() {\n      if (this.searchKeywordNow === '' || this.searchTypeNow === '') {\n        if (this.productStatus === 'all') {\n          return this.products;\n        }\n        return this.products.filter(product => product.status === this.productStatus);\n      } else if (this.searchTypeNow === 'name') {\n        if (this.productStatus === 'all') {\n          return this.products.filter(product => product.name.includes(this.searchKeywordNow));\n        }\n        return this.products.filter(product => product.status === this.productStatus && product.name.includes(this.searchKeywordNow));\n      } else {\n        if (this.productStatus === 'all') {\n          return this.products.filter(product => this.categoryMap[product.category].includes(this.searchKeywordNow));\n        }\n        return this.products.filter(product => product.status === this.productStatus && this.categoryMap[product.category].includes(this.searchKeywordNow));\n      }\n    }\n  },\n  created() {\n    console.log('商品数据加载完成');\n    this.getProducts();\n    this.user_id = this.$store.getters.userId;\n  },\n  methods: {\n    // 上传成功后的回调函数\n    handleImageUploadSuccess(response, file, fileList) {\n      this.user_id = this.$store.getters.userId;\n      let imageId = response.data;\n      console.log(fileList);\n      imageId = file.response;\n      // 更新 fileList 以符合 Element UI 需要的格式\n      this.fileList.push({\n        name: file.name,\n        url: file.url,\n        uid: Date.now() // 确保每个文件有一个唯一的 uid\n      });\n      this.updatedProduct.images.push(imageId);\n      console.log('图片上传成功，ID:', imageId);\n    },\n    removeImage(index) {\n      this.updatedProduct.images.splice(index, 1);\n    },\n    async submitUpdate() {\n      this.user_id = this.$store.getters.userId;\n      // 准备表单数据\n      const formData = new FormData();\n      formData.append('name', this.updatedProduct.name);\n      formData.append('category', this.updatedProduct.category);\n      formData.append('price', this.updatedProduct.price);\n      formData.append('description', this.updatedProduct.description);\n      formData.append('unit', this.updatedProduct.unit);\n      formData.append('notice', this.updatedProduct.notice);\n      formData.append('product_id', this.updatedProduct.id);\n      formData.append('images', JSON.stringify(this.updatedProduct.images));\n      formData.append('quantity', JSON.stringify(this.updatedProduct.quantity));\n      console.log(this.updatedProduct.images);\n      const proUpResponse = await axios.post('http://localhost:8081/product/updateAll', formData);\n      if (proUpResponse.status === 200) {\n        alert('商品更新成功');\n        window.location.reload();\n      } else {\n        alert('商品更新失败');\n        window.location.reload();\n      }\n    },\n    async getProducts() {\n      this.user_id = this.$store.getters.userId;\n      const shopResponse = await axios.post('http://localhost:8081/shop/getByUser_id', {\n        id: this.user_id\n      });\n      if (shopResponse.data != null) {\n        this.shop_id = shopResponse.data.shop_id;\n      }\n      const proResponse = await axios.post('http://localhost:8081/product/getAllByShop_id', {\n        id: this.shop_id\n      });\n      if (proResponse.data != null) {\n        this.products = proResponse.data;\n        this.totalItems = this.products.length;\n      }\n    },\n    async emptyProduct(id) {\n      let data = new FormData();\n      data.append(\"id\", id);\n      data.append(\"status\", \"empty\");\n      const proDelResponse = await axios.post('http://localhost:8081/product/updateStatus', data);\n      if (proDelResponse.status === 200) {\n        alert('商品下架成功');\n        window.location.reload();\n      } else {\n        alert('商品下架失败');\n        window.location.reload();\n      }\n    },\n    async saleProduct(id) {\n      let data = new FormData();\n      data.append(\"id\", id);\n      data.append(\"status\", \"sale\");\n      const proDelResponse = await axios.post('http://localhost:8081/product/updateStatus', data);\n      if (proDelResponse.status === 200) {\n        alert('商品上架成功');\n        window.location.reload();\n      } else {\n        alert('商品上架失败');\n        window.location.reload();\n      }\n    },\n    // 模拟商品搜索功能\n    searchProducts() {\n      this.searchKeywordNow = this.searchKeyword;\n      this.searchTypeNow = this.searchType;\n    },\n    updateProduct(product) {\n      this.updatedProduct.quantity = this.parseJson(product.quantity);\n      this.updatedProduct.name = product.name;\n      this.updatedProduct.category = product.category;\n      this.updatedProduct.price = product.price;\n      this.updatedProduct.description = product.description;\n      this.updatedProduct.unit = product.unit;\n      this.updatedProduct.notice = product.notice;\n      this.updatedProduct.id = product.product_id;\n      this.updateDialogVisible = true;\n    },\n    // 添加库存项\n    addStock() {\n      if (this.updatedProduct.quantity.length < 5) {\n        this.updatedProduct.quantity.push({\n          flavor: '',\n          quantity: 0\n        });\n      }\n    },\n    // 移除库存项\n    removeStock(index) {\n      this.updatedProduct.quantity.splice(index, 1);\n    },\n    // 提交更新库存到后端\n    submitUpdateStock() {\n      const updatedData = {\n        stock: this.updatedStock\n      };\n      axios.post('http://localhost:8081/product/updateStock', updatedData).then(response => {\n        if (response.status === 200) {\n          alert('库存更新成功');\n          this.product.stock = [...this.updatedStock]; // 更新当前商品的库存\n          this.updateStockDialogVisible = false; // 关闭弹窗\n        }\n      }).catch(error => {\n        console.error('库存更新失败', error);\n      });\n    },\n    // 库存解析：将库存字段从字符串转换为对象\n    parseJson(str) {\n      return JSON.parse(str);\n    },\n    handlePageChange(page) {\n      console.log('当前页:', page);\n    },\n    // 商品管理操作\n    deleteProduct(id) {\n      this.deleteProductNow = id;\n      this.deleteDialogVisible = true;\n    },\n    // 重置删除状态\n    resetDeleteState() {\n      this.deleteProductNow = null;\n    },\n    // 确认删除\n    async confirmDelete() {\n      // 调用后端 API 删除商品\n      const proAddResponse = await axios.post('http://localhost:8081/product/deleteById', {\n        id: this.deleteProductNow\n      });\n      if (proAddResponse.status === 200) {\n        this.deleteDialogVisible = false;\n        alert('商品删除成功');\n        window.location.reload();\n      } else {\n        this.deleteDialogVisible = false;\n        alert('商品删除失败');\n        window.location.reload();\n      }\n    },\n    addComplete() {\n      this.showAddProductDialog = false;\n      window.location.reload();\n    },\n    async showProductDetails(product) {\n      let pictures = [];\n      // 查images的url\n      const imageResponse = await axios.post('http://localhost:8081/pic/getManyUrl', {\n        id: product.picture_id\n      });\n      if (imageResponse.data != null) {\n        pictures = imageResponse.data;\n      }\n      // 格式化商品详情数据，适配弹窗中表格的展示\n      this.formattedProductDetails = [{\n        label: '商品名称',\n        value: product.name\n      }, {\n        label: '类别',\n        value: this.categoryMap[product.category]\n      }, {\n        label: '定价',\n        value: product.price\n      }, {\n        label: '描述',\n        value: product.description\n      }, {\n        label: '状态',\n        value: this.statusMap[product.status]\n      }, {\n        label: '创建时间',\n        value: product.created_time\n      }, {\n        label: '更新时间',\n        value: product.updated_time\n      }, {\n        label: '库存量',\n        value: this.parseJson(product.quantity).map(item => `${item.flavor}: ${item.quantity}`).join(', ')\n      }, {\n        label: '售卖单位',\n        value: product.unit\n      }, {\n        label: '商品图片',\n        value: pictures\n      }, {\n        label: '注意事项',\n        value: product.notice\n      }, {\n        label: '折扣',\n        value: product.discount\n      }, {\n        label: '销量',\n        value: product.salenum\n      }, {\n        label: '特产地',\n        value: product.location\n      }];\n      if (product.status === 'suspended') {\n        this.formattedProductDetails.push({\n          label: '打回原因',\n          value: product.reason\n        });\n      }\n\n      // 打开弹窗\n      this.dialogInfoVisible = true;\n    }\n  }\n};","map":{"version":3,"names":["AddProductForm","axios","components","data","fileList","uploadUrl","user_id","shop_id","showAddProductDialog","searchKeyword","searchType","searchKeywordNow","searchTypeNow","deleteDialogVisible","productStatus","formattedProductDetails","deleteProductNow","dialogInfoVisible","updateDialogVisible","updatedProduct","id","name","category","price","description","quantity","unit","notice","images","categoryMap","statusMap","products","currentPage","pageSize","totalItems","addProductDialogVisible","computed","filteredProducts","filter","product","status","includes","created","console","log","getProducts","$store","getters","userId","methods","handleImageUploadSuccess","response","file","imageId","push","url","uid","Date","now","removeImage","index","splice","submitUpdate","formData","FormData","append","JSON","stringify","proUpResponse","post","alert","window","location","reload","shopResponse","proResponse","length","emptyProduct","proDelResponse","saleProduct","searchProducts","updateProduct","parseJson","product_id","addStock","flavor","removeStock","submitUpdateStock","updatedData","stock","updatedStock","then","updateStockDialogVisible","catch","error","str","parse","handlePageChange","page","deleteProduct","resetDeleteState","confirmDelete","proAddResponse","addComplete","showProductDetails","pictures","imageResponse","picture_id","label","value","created_time","updated_time","map","item","join","discount","salenum","reason"],"sources":["src/views/shopmodel/ProductManagementView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>商品管理</h2>\r\n      \r\n      <!-- 搜索栏和操作按钮（顶部）-->\r\n      <div class=\"search-bar\">\r\n        <div style=\"display: flex; align-items: center;\">\r\n          <!-- 搜索方式选择 -->\r\n          <el-select\r\n            v-model=\"searchType\"\r\n            placeholder=\"请选择搜索方式\"\r\n            style=\"width: 150px; margin-right: 10px;\">\r\n            <el-option label=\"名称\" value=\"name\" />\r\n            <el-option label=\"类别\" value=\"category\" />\r\n          </el-select>\r\n  \r\n          <!-- 搜索框 -->\r\n          <el-input\r\n            v-model=\"searchKeyword\"\r\n            placeholder=\"请输入商品名称或类别\"\r\n            style=\"width: 200px; margin-right: 10px;\"\r\n          />\r\n  \r\n          <!-- 搜索按钮 -->\r\n          <el-button @click=\"searchProducts\" type=\"primary\">搜索</el-button>\r\n          \r\n          <!-- 添加商品按钮 -->\r\n            <el-button @click=\"showAddProductDialog = true\" type=\"success\" style=\"margin-left: 10px;\">添加商品</el-button>\r\n\r\n            <!-- 添加商品弹窗 -->\r\n            <el-dialog :visible.sync=\"showAddProductDialog\" title=\"添加商品\" width=\"50%\">\r\n            <!-- 引入添加商品表单组件 -->\r\n            <add-product-form @close=\"addComplete()\" />\r\n            </el-dialog>\r\n        </div>\r\n  \r\n        <div style=\"margin-top: 10px; display: flex; align-items: center;\">\r\n          <!-- 商品状态选择 -->\r\n          <el-select\r\n            v-model=\"productStatus\"\r\n            placeholder=\"选择商品状态\"\r\n            style=\"width: 200px; margin-right: 10px;\">\r\n            <el-option label=\"全部\" value=\"all\" />\r\n            <el-option label=\"售卖中\" value=\"sale\" />\r\n            <el-option label=\"已下架/售罄\" value=\"empty\" />\r\n            <el-option label=\"审核中\" value=\"waiting\" />\r\n            <el-option label=\"审核未通过\" value=\"suspended\" />\r\n          </el-select>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- 商品列表（中部）-->\r\n      <div>\r\n        <el-table :data=\"filteredProducts\" style=\"width: 100%\">\r\n          <el-table-column prop=\"name\" label=\"商品名称\" />\r\n          <el-table-column prop=\"category\" label=\"类别\" :formatter=\"(row, column, cellValue) => categoryMap[cellValue] || '未知类别'\"/>\r\n          <el-table-column prop=\"price\" label=\"定价\" />\r\n  \r\n          <!-- 库存显示为口味-数量 -->\r\n          <el-table-column label=\"库存\">\r\n            <template slot-scope=\"scope\">\r\n              <div>\r\n                <div v-if=\"scope.row.quantity && scope.row.quantity.length\">\r\n                  <div v-for=\"(item, index) in parseJson(scope.row.quantity)\" :key=\"index\">\r\n                    <span>{{ item.flavor }}: {{ item.quantity }} {{ scope.row.unit }}</span>\r\n                  </div>\r\n                </div>\r\n                <div v-else>无库存</div>\r\n              </div>\r\n            </template>\r\n          </el-table-column>\r\n  \r\n          <el-table-column label=\"操作\">\r\n            <template slot-scope=\"scope\">\r\n              <el-button @click=\"deleteProduct(scope.row.product_id)\" size=\"small\" type=\"danger\">删除</el-button>\r\n              <el-button v-if=\"scope.row.status === 'sale'\" @click=\"emptyProduct(scope.row.product_id)\" size=\"small\" type=\"warning\">下架</el-button>\r\n              <el-button v-if=\"scope.row.status === 'empty'\" @click=\"saleProduct(scope.row.product_id)\" size=\"small\" type=\"warning\">上架</el-button>\r\n              <el-button @click=\"showProductDetails(scope.row)\" size=\"small\" type=\"info\">详情</el-button>\r\n              <el-button v-if=\"scope.row.status != 'waiting'\" @click=\"updateProduct(scope.row)\" size=\"small\" type=\"info\">更新信息</el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n  \r\n         <!-- 商品详情弹窗 -->\r\n        <el-dialog :visible.sync=\"dialogInfoVisible\" title=\"商品详情\">\r\n          <el-table :data=\"this.formattedProductDetails\" style=\"width: 100%\">\r\n            <el-table-column prop=\"label\"></el-table-column>\r\n            <el-table-column prop=\"value\">\r\n              <template slot-scope=\"scope\">\r\n                <!-- 判断是否为商品图片 -->\r\n                <template v-if=\"scope.row.label === '商品图片'\">\r\n                  <!-- 如果是商品图片，则遍历图片数组并显示 -->\r\n                  <div v-for=\"(image, index) in scope.row.value\" :key=\"index\" style=\"display: inline-block; margin-right: 10px;\">\r\n                    <img :src=\"'http://localhost:8081'+image\" alt=\"商品图片\" style=\"width: 50px; height: 50px; object-fit: cover;\" />\r\n                  </div>\r\n                </template>\r\n                <!-- 显示其他字段 -->\r\n                <template v-else>\r\n                  <span>{{ scope.row.value }}</span>\r\n                </template>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n          <div slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button @click=\"dialogInfoVisible = false\">关闭</el-button>\r\n          </div>\r\n        </el-dialog>\r\n\r\n        <!-- 删除确认弹窗 -->\r\n        <el-dialog\r\n          title=\"确认删除\"\r\n          :visible.sync=\"deleteDialogVisible\"\r\n          width=\"400px\"\r\n          @close=\"resetDeleteState\"\r\n        >\r\n          <p>确定要删除这个商品吗？</p>\r\n          <span slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button @click=\"deleteDialogVisible = false\">取消</el-button>\r\n            <el-button type=\"primary\" @click=\"confirmDelete\">确认</el-button>\r\n          </span>\r\n        </el-dialog>\r\n\r\n        <!-- 编辑弹窗 -->\r\n        <el-dialog :visible.sync=\"updateDialogVisible\" title=\"更新信息\">\r\n          <el-form :model=\"updatedProduct\">\r\n            <el-form-item label=\"名称\">\r\n              <el-input v-model=\"updatedProduct.name\" type=\"text\" id=\"productName\" required />\r\n            </el-form-item>\r\n            <el-form-item label=\"类别\">\r\n              <el-select v-model=\"updatedProduct.category\" id=\"category\" required>\r\n                <!-- 通过categoryMap的键值对动态生成选项 -->\r\n                <el-option\r\n                  v-for=\"(label, value) in categoryMap\"\r\n                  :key=\"value\"\r\n                  :label=\"label\"\r\n                  :value=\"value\"\r\n                />\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"定价\">\r\n              <el-input  v-model=\"updatedProduct.price\" type=\"number\" id=\"price\" min=\"0\" step=\"0.01\" required  />\r\n            </el-form-item>\r\n            <el-form-item label=\"商品描述\">\r\n              <el-input v-model=\"updatedProduct.description\" type=\"text\" id=\"productDescription\" required />\r\n            </el-form-item>\r\n            <el-form-item label=\"售卖单位\">\r\n              <el-input v-model=\"updatedProduct.unit\" type=\"text\" id=\"productUnit\" required />\r\n            </el-form-item>\r\n            <el-form-item label=\"注意事项\">\r\n              <el-input v-model=\"updatedProduct.notice\" type=\"text\" id=\"productNotice\" required />\r\n            </el-form-item>\r\n            <el-form-item label=\"库存量\">\r\n              <div class=\"stock-tags\">\r\n                <div v-for=\"(stock, index) in updatedProduct.quantity\" :key=\"index\" class=\"stock-tag\">\r\n                  <el-input v-model=\"stock.flavor\" placeholder=\"口味\" style=\"width: 100px; margin-right: 10px;\"></el-input>\r\n                  <el-input v-model=\"stock.quantity\" type=\"number\" min=\"0\" placeholder=\"库存量\" style=\"width: 100px;\"></el-input>\r\n                  <el-button type=\"danger\" @click=\"removeStock(index)\" size=\"small\">移除</el-button>\r\n                </div>\r\n                <el-button @click=\"addStock\" type=\"primary\" :disabled=\"updatedProduct.quantity.length >= 5\">添加库存项</el-button>\r\n              </div>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品图片\">\r\n              <!-- 使用 Element UI 的上传组件 el-upload -->\r\n              <el-upload\r\n                class=\"image-upload-container\"\r\n                :action=\"uploadUrl\"\r\n                :file-list=\"fileList\" \r\n                :on-success=\"handleImageUploadSuccess\" \r\n                :disabled=\"updatedProduct.images.length >= 5\"  \r\n                accept=\"image/*\" \r\n                :limit=\"5\" \r\n                list-type=\"picture-card\" \r\n              >\r\n                <i class=\"el-icon-plus\"></i>\r\n              </el-upload>\r\n            </el-form-item>\r\n\r\n            <!-- 图片预览部分 -->\r\n            <el-form-item label=\"图片预览\">\r\n              <div class=\"image-previews\">\r\n                <div v-for=\"(image, index) in fileList\" :key=\"'preview-' + index\" class=\"image-preview\">\r\n                  <img :src=\"image.url\" :alt=\"'preview-' + index\" class=\"preview-img\" />\r\n                  <el-button \r\n                    size=\"mini\" \r\n                    type=\"danger\" \r\n                    icon=\"el-icon-delete\" \r\n                    @click=\"removeImage(index)\">\r\n                    移除\r\n                  </el-button>\r\n                </div>\r\n              </div>\r\n            </el-form-item>\r\n          </el-form>\r\n          <div slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button @click=\"updateDialogVisible = false\">取消</el-button>\r\n            <el-button @click=\"submitUpdate\" type=\"primary\">提交</el-button>\r\n          </div>\r\n        </el-dialog>\r\n\r\n        <!-- 翻页组件 -->\r\n        <el-pagination\r\n          :current-page=\"currentPage\"\r\n          :page-size=\"pageSize\"\r\n          :total=\"totalItems\"\r\n          @current-change=\"handlePageChange\"\r\n          layout=\"prev, pager, next\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import AddProductForm from './AddProduct.vue';\r\n  import axios from 'axios';\r\n\r\n  export default {\r\n    components: {\r\n        AddProductForm\r\n    },\r\n    data() {\r\n      return {\r\n        fileList:[],\r\n        uploadUrl: 'http://localhost:8081/pic/uploadAndId',\r\n        user_id: 1,   // session获取\r\n        shop_id: '',\r\n        showAddProductDialog: false,  // 控制弹窗的显示\r\n        searchKeyword: '',\r\n        searchType: 'name',  // 默认为根据名称搜索\r\n        searchKeywordNow:'',\r\n        searchTypeNow: '',  // 搜索用\r\n        deleteDialogVisible:false,\r\n        productStatus: 'all',  // 默认为“全部”状态\r\n        formattedProductDetails:[],   // 用于展示详情和修改\r\n        deleteProductNow:'',  // 用户删除商品\r\n        dialogInfoVisible: false,     // 详情弹窗\r\n        updateDialogVisible:false,  // 更新弹窗\r\n        updatedProduct: {\r\n          id: '',\r\n          name: '',\r\n          category: '',\r\n          price: null,\r\n          description: '',\r\n          quantity: [],\r\n          unit: '',\r\n          notice: '',\r\n          images: [], // 存储图片信息\r\n        },\r\n        categoryMap: {\r\n          'fresh': '生鲜食品',\r\n          'snack': '零食小吃',\r\n          'drink': '酒水饮料',\r\n          'dry': '干货腌货',\r\n          'instant': '即食食品',\r\n          'green': '农产品'\r\n        },\r\n        statusMap: {\r\n          'sale': '售卖中',\r\n          'empty': '已下架/售罄',\r\n          'waiting': '审核中',\r\n          'suspended': '审核未通过'\r\n        },\r\n        products: [],\r\n        currentPage: 1,\r\n        pageSize: 15,\r\n        totalItems: 3, // 模拟总商品数\r\n        addProductDialogVisible: false,\r\n      };\r\n    },\r\n    computed: {\r\n        // 过滤后的商品列表\r\n      filteredProducts() {\r\n        if (this.searchKeywordNow==='' || this.searchTypeNow===''){\r\n          if (this.productStatus === 'all') {\r\n              return this.products;\r\n          }\r\n          return this.products.filter(product => product.status === this.productStatus);\r\n        }\r\n        else if (this.searchTypeNow==='name') {\r\n          if (this.productStatus === 'all') {\r\n            return this.products.filter(product => product.name.includes(this.searchKeywordNow))\r\n          }\r\n          return this.products.filter(product => product.status === this.productStatus && product.name.includes(this.searchKeywordNow))\r\n        } else {\r\n          if (this.productStatus === 'all') {\r\n            return this.products.filter(product => this.categoryMap[product.category].includes(this.searchKeywordNow))\r\n          }\r\n          return this.products.filter(product => product.status === this.productStatus && this.categoryMap[product.category].includes(this.searchKeywordNow))\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n      console.log('商品数据加载完成');\r\n      this.getProducts();\r\n      this.user_id=this.$store.getters.userId;\r\n    },\r\n    methods: {\r\n      // 上传成功后的回调函数\r\n      handleImageUploadSuccess(response, file, fileList) {\r\n        this.user_id=this.$store.getters.userId;\r\n        let imageId = response.data;\r\n        console.log(fileList);\r\n        imageId = file.response;\r\n        // 更新 fileList 以符合 Element UI 需要的格式\r\n        this.fileList.push({\r\n          name: file.name,\r\n          url: file.url,\r\n          uid: Date.now(),  // 确保每个文件有一个唯一的 uid\r\n        });\r\n        this.updatedProduct.images.push(imageId);\r\n        console.log('图片上传成功，ID:', imageId);\r\n      },\r\n\r\n      removeImage(index) {\r\n        this.updatedProduct.images.splice(index, 1);\r\n      },\r\n      async submitUpdate() {\r\n        this.user_id=this.$store.getters.userId;\r\n        // 准备表单数据\r\n        const formData = new FormData();\r\n        formData.append('name', this.updatedProduct.name);\r\n        formData.append('category', this.updatedProduct.category);\r\n        formData.append('price', this.updatedProduct.price);\r\n        formData.append('description', this.updatedProduct.description);\r\n        formData.append('unit', this.updatedProduct.unit);\r\n        formData.append('notice', this.updatedProduct.notice);\r\n        formData.append('product_id', this.updatedProduct.id);\r\n        formData.append('images', JSON.stringify(this.updatedProduct.images));\r\n        formData.append('quantity', JSON.stringify(this.updatedProduct.quantity));\r\n        console.log(this.updatedProduct.images);\r\n\r\n        const proUpResponse = await axios.post('http://localhost:8081/product/updateAll', formData);\r\n        if ( proUpResponse.status === 200 ) {\r\n          alert('商品更新成功');\r\n          window.location.reload();\r\n        } else {\r\n          alert('商品更新失败');\r\n          window.location.reload();\r\n        }\r\n      },\r\n      async getProducts() {\r\n        this.user_id=this.$store.getters.userId;\r\n        const shopResponse = await axios.post('http://localhost:8081/shop/getByUser_id', {id:this.user_id});\r\n        if ( shopResponse.data != null ) {\r\n          this.shop_id = shopResponse.data.shop_id;\r\n        }\r\n        const proResponse = await axios.post('http://localhost:8081/product/getAllByShop_id', {id:this.shop_id});\r\n        if ( proResponse.data != null ) {\r\n          this.products = proResponse.data;\r\n          this.totalItems = this.products.length;\r\n        }\r\n      },\r\n      async emptyProduct(id) {\r\n        let data = new FormData();\r\n        data.append(\"id\",id);\r\n        data.append(\"status\",\"empty\");\r\n        const proDelResponse = await axios.post('http://localhost:8081/product/updateStatus', data);\r\n        if ( proDelResponse.status === 200 ) {\r\n          alert('商品下架成功');\r\n          window.location.reload();\r\n        } else {\r\n          alert('商品下架失败');\r\n          window.location.reload();\r\n        }\r\n      },\r\n      async saleProduct(id) {\r\n        let data = new FormData();\r\n        data.append(\"id\",id);\r\n        data.append(\"status\",\"sale\");\r\n        const proDelResponse = await axios.post('http://localhost:8081/product/updateStatus', data);\r\n        if ( proDelResponse.status === 200 ) {\r\n          alert('商品上架成功');\r\n          window.location.reload();\r\n        } else {\r\n          alert('商品上架失败');\r\n          window.location.reload();\r\n        }\r\n      },\r\n      // 模拟商品搜索功能\r\n      searchProducts() {\r\n        this.searchKeywordNow = this.searchKeyword;\r\n        this.searchTypeNow = this.searchType;\r\n      },\r\n\r\n      updateProduct(product) {\r\n        this.updatedProduct.quantity = this.parseJson(product.quantity);\r\n        this.updatedProduct.name = product.name;\r\n        this.updatedProduct.category = product.category;\r\n        this.updatedProduct.price = product.price;\r\n        this.updatedProduct.description = product.description;\r\n        this.updatedProduct.unit = product.unit;\r\n        this.updatedProduct.notice = product.notice;\r\n        this.updatedProduct.id = product.product_id;\r\n        this.updateDialogVisible = true;\r\n      },\r\n\r\n      // 添加库存项\r\n      addStock() {\r\n        if (this.updatedProduct.quantity.length < 5) {\r\n          this.updatedProduct.quantity.push({ flavor: '', quantity: 0 });\r\n        }\r\n      },\r\n      // 移除库存项\r\n      removeStock(index) {\r\n        this.updatedProduct.quantity.splice(index, 1);\r\n      },\r\n      // 提交更新库存到后端\r\n      submitUpdateStock() {\r\n        const updatedData = {\r\n          stock: this.updatedStock\r\n        };\r\n\r\n        axios.post('http://localhost:8081/product/updateStock', updatedData)\r\n          .then(response => {\r\n            if (response.status === 200) {\r\n              alert('库存更新成功');\r\n              this.product.stock = [...this.updatedStock]; // 更新当前商品的库存\r\n              this.updateStockDialogVisible = false; // 关闭弹窗\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('库存更新失败', error);\r\n          });\r\n      },\r\n\r\n      // 库存解析：将库存字段从字符串转换为对象\r\n      parseJson(str) {\r\n        return JSON.parse(str);\r\n      },\r\n      handlePageChange(page) {\r\n        console.log('当前页:', page);\r\n      },\r\n      // 商品管理操作\r\n      deleteProduct(id) {\r\n        this.deleteProductNow = id;\r\n        this.deleteDialogVisible = true;\r\n      },\r\n      // 重置删除状态\r\n      resetDeleteState() {\r\n        this.deleteProductNow = null;\r\n      },\r\n      // 确认删除\r\n      async confirmDelete() {\r\n        // 调用后端 API 删除商品\r\n        const proAddResponse = await axios.post('http://localhost:8081/product/deleteById', {id: this.deleteProductNow});\r\n        if ( proAddResponse.status === 200) {\r\n          this.deleteDialogVisible = false;\r\n          alert('商品删除成功');\r\n          window.location.reload();\r\n        } else {\r\n          this.deleteDialogVisible = false;\r\n          alert('商品删除失败');\r\n          window.location.reload();\r\n        }\r\n      },\r\n      addComplete() {\r\n        this.showAddProductDialog = false;\r\n        window.location.reload();\r\n      },\r\n      async showProductDetails(product) {\r\n        let pictures = [];\r\n        // 查images的url\r\n        const imageResponse = await axios.post('http://localhost:8081/pic/getManyUrl', {id:product.picture_id});\r\n        if ( imageResponse.data != null ) {\r\n          pictures = imageResponse.data;\r\n        }\r\n        // 格式化商品详情数据，适配弹窗中表格的展示\r\n        this.formattedProductDetails = [\r\n          { label: '商品名称', value: product.name },\r\n          { label: '类别', value: this.categoryMap[product.category] },\r\n          { label: '定价', value: product.price },\r\n          { label: '描述', value: product.description },\r\n          { label: '状态', value: this.statusMap[product.status] },\r\n          { label: '创建时间', value: product.created_time },\r\n          { label: '更新时间', value: product.updated_time },\r\n          { label: '库存量', value: this.parseJson(product.quantity).map(item => `${item.flavor}: ${item.quantity}`).join(', ') },\r\n          { label: '售卖单位', value: product.unit },\r\n          { label: '商品图片', value: pictures },\r\n          { label: '注意事项', value: product.notice },\r\n          { label: '折扣', value: product.discount },\r\n          { label: '销量', value: product.salenum },\r\n          { label: '特产地', value: product.location }\r\n        ];\r\n        if (product.status === 'suspended') {\r\n          this.formattedProductDetails.push({label: '打回原因', value: product.reason});\r\n        }\r\n\r\n        // 打开弹窗\r\n        this.dialogInfoVisible = true;\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .search-bar {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .el-table th {\r\n    background-color: #f4f4f4;\r\n  }\r\n  \r\n  .dialog-footer {\r\n    text-align: right;\r\n  }\r\n  \r\n  .stock-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n  \r\n  .stock-table th,\r\n  .stock-table td {\r\n    padding: 10px;\r\n    text-align: center;\r\n    border: 1px solid #ddd;\r\n  }\r\n  \r\n  .stock-table th {\r\n    background-color: #f2f2f2;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .stock-table tr:nth-child(even) {\r\n    background-color: #f9f9f9;\r\n  }\r\n  \r\n  .stock-table tr:hover {\r\n    background-color: #f1f1f1;\r\n  }\r\n  /* 设定图片预览的最大宽度和高度 */\r\n  .preview-img {\r\n    max-width: 150px; /* 控制最大宽度 */\r\n    max-height: 150px; /* 控制最大高度 */\r\n    object-fit: cover; /* 确保图片按比例缩放且不会变形 */\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}