{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport QRCode from 'qrcodejs2';\nexport default {\n  name: 'UserOrdersView',\n  data() {\n    return {\n      activeTab: 'all',\n      orders: [{\n        id: '4',\n        date: '2024-03-20 15:30:00',\n        status: 'pending',\n        products: [{\n          id: 1,\n          name: '示例商品1',\n          spec: '默认规格',\n          price: 999,\n          quantity: 1,\n          image: 'https://via.placeholder.com/120'\n        }],\n        totalQuantity: 1,\n        totalAmount: 999\n      }, {\n        id: '2',\n        date: '2024-03-20 14:30:00',\n        status: 'completed',\n        products: [{\n          id: 2,\n          name: '示例商品2',\n          spec: '默认规格',\n          price: 299,\n          quantity: 2,\n          image: 'https://via.placeholder.com/120'\n        }],\n        totalQuantity: 2,\n        totalAmount: 598\n      }],\n      showPayMethodDialog: false,\n      showPayDialog: false,\n      payMethod: '',\n      payTypeText: '',\n      qrCodeInstance: null,\n      currentPayAmount: 0,\n      currentPayOrder: null\n    };\n  },\n  created() {\n    // 获取路由中的订单ID\n    const orderId = this.$route.query.orderId;\n    if (orderId) {\n      // 如果有订单ID，可以直接定位到该订单\n      this.scrollToOrder(orderId);\n    }\n  },\n  methods: {\n    handleTabClick(tab) {\n      console.log('切换标签：', tab.name);\n      // 这里可以根据标签筛选订单\n    },\n    async payOrder(order) {\n      this.currentPayOrder = order;\n      this.currentPayAmount = order.totalAmount;\n      this.showPayMethodDialog = true;\n    },\n    async selectPayMethod(method) {\n      this.payMethod = method;\n      this.payTypeText = method === 'wechat' ? '微信' : '支付宝';\n      this.showPayMethodDialog = false;\n      try {\n        /*// 调用后端接口获取支付链接\r\n        const response = await this.$axios.post('/order/pay', {\r\n          orderId: this.currentPayOrder.id,\r\n          amount: this.currentPayAmount,\r\n          payMethod: method\r\n        });\r\n        \r\n        // 显示支付二维码\r\n        this.showPayDialog = true;\r\n        this.$nextTick(() => {\r\n          this.generateQRCode(response.data.payUrl || 'https://example.com/pay');\r\n        });\r\n        \r\n        // 开始轮询支付状态\r\n        this.startCheckPayStatus(this.currentPayOrder.id);*/\n        this.showPayDialog = true;\n        const testPayUrl = method === 'wechat' ? `weixin://wxpay/bizpayurl?pr=order_${this.currentPayOrder.id}_${this.currentPayAmount}` : `https://qr.alipay.com/pay?order=${this.currentPayOrder.id}&amount=${this.currentPayAmount}`;\n\n        // 在对话框显示后生成二维码，并设置不同的颜色\n        this.$nextTick(() => {\n          this.generateQRCode(testPayUrl, method);\n        });\n      } catch (error) {\n        this.$message.error('创建支付订单失败，请重试');\n        console.error('创建支付订单失败:', error);\n      }\n    },\n    generateQRCode(url, payMethod) {\n      // 清除已存在的二维码\n      if (this.qrCodeInstance) {\n        this.qrCodeInstance.clear();\n      }\n      const qrContainer = this.$refs.qrCode;\n      if (qrContainer) {\n        qrContainer.innerHTML = '';\n        this.qrCodeInstance = new QRCode(qrContainer, {\n          text: url,\n          width: 200,\n          height: 200,\n          colorDark: payMethod === 'wechat' ? '#2C8722' : '#00A0E9',\n          // 微信绿色 vs 支付宝蓝色\n          colorLight: '#ffffff',\n          correctLevel: QRCode.CorrectLevel.H\n        });\n      }\n    },\n    cancelPay() {\n      this.$confirm('确定要取消支付吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.showPayDialog = false;\n        this.stopCheckPayStatus();\n      }).catch(() => {});\n    },\n    async confirmPay() {\n      try {\n        // 调用后端验证支付状态\n        const response = await this.$axios.post('http://localhost:8081/order/pay', {\n          order_id: this.currentPayOrder.id,\n          payment_method: this.payTypeText\n        });\n        /*\r\n        if (response.data.paid) {\r\n          this.$message.success('支付成功！');\r\n          this.showPayDialog = false;\r\n          // 更新订单状态\r\n          this.currentPayOrder.status = '待发货';\r\n          this.stopCheckPayStatus();\r\n        } else {\r\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\r\n        }*/\n        if (response.status === 201) {\n          this.$message.success('支付成功！');\n          this.showPayDialog = false;\n          // 更新订单状态\n          this.currentPayOrder.status = '待发货';\n          this.stopCheckPayStatus();\n        } else {\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\n        }\n      } catch (error) {\n        this.$message.error('验证支付状态失败，请稍后重试');\n        console.error('验证支付失败:', error);\n      }\n    },\n    startCheckPayStatus(orderId) {\n      this.payStatusTimer = setInterval(async () => {\n        try {\n          const response = await this.$axios.get(`/api/payment/status/${orderId}`);\n          if (response.data.paid) {\n            this.$message.success('支付成功！');\n            this.showPayDialog = false;\n            // 更新订单状态\n            this.currentPayOrder.status = '待发货';\n            this.stopCheckPayStatus();\n          }\n        } catch (error) {\n          console.error('检查支付状态失败:', error);\n        }\n      }, 3000); // 每3秒检查一次\n    },\n    stopCheckPayStatus() {\n      if (this.payStatusTimer) {\n        clearInterval(this.payStatusTimer);\n        this.payStatusTimer = null;\n      }\n    },\n    confirmReceive(order) {\n      console.log('确认收货：', order.id);\n    },\n    reviewOrder(order) {\n      this.$router.push({\n        name: 'user-review',\n        query: {\n          orderId: order.id,\n          productId: order.products[0].id // 如果一个订单只有一个商品\n        }\n      });\n    },\n    viewOrderDetail(order) {\n      this.$router.push(`/user/orders/${order.id}`);\n    },\n    scrollToOrder(orderId) {\n      // 可以添加一些视觉效果，比如高亮显示该订单\n      this.$nextTick(() => {\n        const orderElement = document.getElementById(`order-${orderId}`);\n        if (orderElement) {\n          orderElement.scrollIntoView({\n            behavior: 'smooth'\n          });\n          // 可以添加临时的高亮效果\n          orderElement.classList.add('highlight');\n          setTimeout(() => {\n            orderElement.classList.remove('highlight');\n          }, 3000);\n        }\n      });\n    }\n    /*async addToCart(order) {\r\n      try {\r\n        // 获取订单中的第一个商品\r\n        const product = order.products[0];\r\n        \r\n        const cartData = {\r\n          user_id: 1, // 应该从用户状态中获取\r\n          product_id: product.id,\r\n          quantity: product.quantity,\r\n          shop_id: order.shop_id || 1 // 如果订单中有店铺ID就使用，否则默认为1\r\n        };\r\n          const response = await this.$axios.post('http://localhost:8081/cart/add', cartData);\r\n        \r\n        if (response.status === 201) {\r\n          this.$message.success('已添加到购物车');\r\n        } else {\r\n          throw new Error(response.data.message || '添加失败');\r\n        }\r\n      } catch (error) {\r\n        this.$message.error(error.message || '添加到购物车失败，请重试');\r\n        console.error('添加到购物车失败:', error);\r\n      }\r\n    }*/\n  },\n  beforeDestroy() {\n    this.stopCheckPayStatus();\n    // 清除二维码实例\n    if (this.qrCodeInstance) {\n      this.qrCodeInstance.clear();\n    }\n  },\n  getStatusText(status) {\n    const statusMap = {\n      'pending': '待支付',\n      'delivered': '待收货',\n      'cancelled': '已取消',\n      'completed': '已完成'\n    };\n    return statusMap[status] || status;\n  }\n};","map":{"version":3,"names":["QRCode","name","data","activeTab","orders","id","date","status","products","spec","price","quantity","image","totalQuantity","totalAmount","showPayMethodDialog","showPayDialog","payMethod","payTypeText","qrCodeInstance","currentPayAmount","currentPayOrder","created","orderId","$route","query","scrollToOrder","methods","handleTabClick","tab","console","log","payOrder","order","selectPayMethod","method","testPayUrl","$nextTick","generateQRCode","error","$message","url","clear","qrContainer","$refs","qrCode","innerHTML","text","width","height","colorDark","colorLight","correctLevel","CorrectLevel","H","cancelPay","$confirm","confirmButtonText","cancelButtonText","type","then","stopCheckPayStatus","catch","confirmPay","response","$axios","post","order_id","payment_method","success","warning","startCheckPayStatus","payStatusTimer","setInterval","get","paid","clearInterval","confirmReceive","reviewOrder","$router","push","productId","viewOrderDetail","orderElement","document","getElementById","scrollIntoView","behavior","classList","add","setTimeout","remove","beforeDestroy","getStatusText","statusMap"],"sources":["src/views/usermodel/UserOrdersView.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-orders-container\">\r\n    <div class=\"user-orders-page\">\r\n      <div class=\"orders-container\">\r\n        <h2>我的订单</h2>\r\n        \r\n        <!-- 订单状态标签 -->\r\n        <div class=\"order-tabs\">\r\n          <el-tabs v-model=\"activeTab\" @tab-click=\"handleTabClick\">\r\n            <el-tab-pane label=\"全部\" name=\"all\"></el-tab-pane>\r\n            <el-tab-pane label=\"待付款\" name=\"unpaid\"></el-tab-pane>\r\n            <el-tab-pane label=\"待发货\" name=\"unshipped\"></el-tab-pane>\r\n            <el-tab-pane label=\"待收货\" name=\"shipped\"></el-tab-pane>\r\n            <el-tab-pane label=\"已完成\" name=\"completed\"></el-tab-pane>\r\n          </el-tabs>\r\n        </div>\r\n  \r\n        <!-- 订单列表 -->\r\n        <div class=\"order-list\">\r\n          <div v-for=\"order in orders\" :key=\"order.id\" :id=\"`order-${order.id}`\" class=\"order-item\">\r\n            <div class=\"order-header\">\r\n              <div class=\"order-info\">\r\n                <span class=\"order-id\">订单号：{{ order.id }}</span>\r\n                <span class=\"order-date\">{{ order.date }}</span>\r\n              </div>\r\n              <div class=\"order-status\">{{ getStatusText(order.status) }}</div>\r\n            </div>\r\n  \r\n            <div class=\"order-products\">\r\n              <div v-for=\"product in order.products\" :key=\"product.id\" class=\"product-item\">\r\n                <img :src=\"product.image\" :alt=\"product.name\">\r\n                <div class=\"product-info\">\r\n                  <h4>{{ product.name }}</h4>\r\n                  <p class=\"product-spec\">{{ product.spec }}</p>\r\n                  <div class=\"product-price\">\r\n                    <span class=\"price\">¥{{ product.price.toFixed(2) }}</span>\r\n                    <span class=\"quantity\">x{{ product.quantity }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n  \r\n            <div class=\"order-footer\">\r\n              <div class=\"order-total\">\r\n                共 {{ order.totalQuantity }} 件商品，\r\n                实付款：<span class=\"total-price\">¥{{ order.totalAmount.toFixed(2) }}</span>\r\n              </div>\r\n              <div class=\"order-actions\">\r\n                <el-button \r\n                  v-if=\"order.status === 'pending'\" \r\n                  type=\"primary\"\r\n                  size=\"small\"\r\n                  @click=\"payOrder(order)\"\r\n                >\r\n                  立即付款\r\n                </el-button>\r\n                <el-button \r\n                  v-if=\"order.status === 'delivered'\" \r\n                  type=\"success\"\r\n                  size=\"small\"\r\n                  @click=\"confirmReceive(order)\"\r\n                >\r\n                  确认收货\r\n                </el-button>\r\n                <el-button \r\n                  v-if=\"order.status === 'completed'\" \r\n                  type=\"primary\"\r\n                  plain\r\n                  size=\"small\"\r\n                  @click=\"reviewOrder(order)\"\r\n                >\r\n                  评价\r\n                </el-button>\r\n                <el-button \r\n                  type=\"text\"\r\n                  size=\"small\"\r\n                  @click=\"addToCart(order)\"\r\n                >\r\n                  加入购物车\r\n                </el-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- 空状态 -->\r\n        <div v-if=\"orders.length === 0\" class=\"empty-state\">\r\n          <i class=\"el-icon-document\"></i>\r\n          <p>暂无相关订单</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 选择支付方式对话框 -->\r\n    <el-dialog\r\n      title=\"选择支付方式\"\r\n      :visible.sync=\"showPayMethodDialog\"\r\n      width=\"300px\"\r\n      center\r\n      :close-on-click-modal=\"false\"\r\n    >\r\n      <div class=\"pay-method-content\">\r\n        <el-button class=\"pay-method-btn\" @click=\"selectPayMethod('wechat')\">\r\n          <i class=\"el-icon-goods\"></i>\r\n          微信支付\r\n        </el-button>\r\n        <el-button class=\"pay-method-btn\" @click=\"selectPayMethod('alipay')\">\r\n          <i class=\"el-icon-goods\"></i>\r\n          支付宝支付\r\n        </el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- 添加支付二维码对话框 -->\r\n    <el-dialog\r\n      :title=\"payTypeText\"\r\n      :visible.sync=\"showPayDialog\"\r\n      width=\"300px\"\r\n      center\r\n      :close-on-click-modal=\"false\"\r\n    >\r\n      <div class=\"pay-dialog-content\">\r\n        <p class=\"pay-type-text\">{{ payTypeText }}扫码支付</p>\r\n        <div class=\"qr-code\" ref=\"qrCode\"></div>\r\n        <div class=\"pay-amount\">\r\n          支付金额：<span class=\"price\">¥{{ currentPayAmount }}</span>\r\n        </div>\r\n        <div class=\"pay-tips\">\r\n          <p>请使用{{ payTypeText }}扫描二维码完成支付</p>\r\n          <p class=\"small\">支付完成前请不要关闭窗口</p>\r\n        </div>\r\n      </div>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"cancelPay\">取消支付</el-button>\r\n        <el-button type=\"primary\" @click=\"confirmPay\">确认已支付</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport QRCode from 'qrcodejs2';\r\n\r\nexport default {\r\n  name: 'UserOrdersView',\r\n  data() {\r\n    return {\r\n      activeTab: 'all',\r\n      orders: [\r\n        {\r\n          id: '4',\r\n          date: '2024-03-20 15:30:00',\r\n          status: 'pending',\r\n          products: [\r\n            {\r\n              id: 1,\r\n              name: '示例商品1',\r\n              spec: '默认规格',\r\n              price: 999,\r\n              quantity: 1,\r\n              image: 'https://via.placeholder.com/120'\r\n            }\r\n          ],\r\n          totalQuantity: 1,\r\n          totalAmount: 999\r\n        },\r\n        {\r\n          id: '2',\r\n          date: '2024-03-20 14:30:00',\r\n          status: 'completed',\r\n          products: [\r\n            {\r\n              id: 2,\r\n              name: '示例商品2',\r\n              spec: '默认规格',\r\n              price: 299,\r\n              quantity: 2,\r\n              image: 'https://via.placeholder.com/120'\r\n            }\r\n          ],\r\n          totalQuantity: 2,\r\n          totalAmount: 598\r\n        }\r\n      ],\r\n      showPayMethodDialog: false,\r\n      showPayDialog: false,\r\n      payMethod: '',\r\n      payTypeText: '',\r\n      qrCodeInstance: null,\r\n      currentPayAmount: 0,\r\n      currentPayOrder: null\r\n    }\r\n  },\r\n  created() {\r\n    // 获取路由中的订单ID\r\n    const orderId = this.$route.query.orderId;\r\n    if (orderId) {\r\n      // 如果有订单ID，可以直接定位到该订单\r\n      this.scrollToOrder(orderId);\r\n    }\r\n  },\r\n  methods: {\r\n    handleTabClick(tab) {\r\n      console.log('切换标签：', tab.name)\r\n      // 这里可以根据标签筛选订单\r\n    },\r\n    async payOrder(order) {\r\n      this.currentPayOrder = order;\r\n      this.currentPayAmount = order.totalAmount;\r\n      this.showPayMethodDialog = true;\r\n    },\r\n    async selectPayMethod(method) {\r\n      this.payMethod = method;\r\n      this.payTypeText = method === 'wechat' ? '微信' : '支付宝';\r\n      this.showPayMethodDialog = false;\r\n      try {\r\n        /*// 调用后端接口获取支付链接\r\n        const response = await this.$axios.post('/order/pay', {\r\n          orderId: this.currentPayOrder.id,\r\n          amount: this.currentPayAmount,\r\n          payMethod: method\r\n        });\r\n        \r\n        // 显示支付二维码\r\n        this.showPayDialog = true;\r\n        this.$nextTick(() => {\r\n          this.generateQRCode(response.data.payUrl || 'https://example.com/pay');\r\n        });\r\n        \r\n        // 开始轮询支付状态\r\n        this.startCheckPayStatus(this.currentPayOrder.id);*/\r\n        this.showPayDialog = true;\r\n        const testPayUrl = method === 'wechat' \r\n          ? `weixin://wxpay/bizpayurl?pr=order_${this.currentPayOrder.id}_${this.currentPayAmount}` \r\n          : `https://qr.alipay.com/pay?order=${this.currentPayOrder.id}&amount=${this.currentPayAmount}`;\r\n\r\n        // 在对话框显示后生成二维码，并设置不同的颜色\r\n        this.$nextTick(() => {\r\n          this.generateQRCode(testPayUrl, method);\r\n        });\r\n        \r\n      } catch (error) {\r\n        this.$message.error('创建支付订单失败，请重试');\r\n        console.error('创建支付订单失败:', error);\r\n      }\r\n    },\r\n    generateQRCode(url, payMethod) {\r\n      // 清除已存在的二维码\r\n      if (this.qrCodeInstance) {\r\n        this.qrCodeInstance.clear();\r\n      }\r\n      const qrContainer = this.$refs.qrCode;\r\n      if (qrContainer) {\r\n        qrContainer.innerHTML = '';\r\n        this.qrCodeInstance = new QRCode(qrContainer, {\r\n          text: url,\r\n          width: 200,\r\n          height: 200,\r\n          colorDark: payMethod === 'wechat' ? '#2C8722' : '#00A0E9',  // 微信绿色 vs 支付宝蓝色\r\n          colorLight: '#ffffff',\r\n          correctLevel: QRCode.CorrectLevel.H\r\n        });\r\n      }\r\n    },\r\n    cancelPay() {\r\n      this.$confirm('确定要取消支付吗？', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.showPayDialog = false;\r\n        this.stopCheckPayStatus();\r\n      }).catch(() => {});\r\n    },\r\n    async confirmPay() {\r\n      try {\r\n        // 调用后端验证支付状态\r\n        const response = await this.$axios.post('http://localhost:8081/order/pay', {\r\n          order_id: this.currentPayOrder.id,\r\n          payment_method:this.payTypeText\r\n        });\r\n        /*\r\n        if (response.data.paid) {\r\n          this.$message.success('支付成功！');\r\n          this.showPayDialog = false;\r\n          // 更新订单状态\r\n          this.currentPayOrder.status = '待发货';\r\n          this.stopCheckPayStatus();\r\n        } else {\r\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\r\n        }*/\r\n        if (response.status === 201) {\r\n          this.$message.success('支付成功！');\r\n          this.showPayDialog = false;\r\n          // 更新订单状态\r\n          this.currentPayOrder.status = '待发货';\r\n          this.stopCheckPayStatus();\r\n        } else {\r\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('验证支付状态失败，请稍后重试');\r\n        console.error('验证支付失败:', error);\r\n      }\r\n    },\r\n    startCheckPayStatus(orderId) {\r\n      this.payStatusTimer = setInterval(async () => {\r\n        try {\r\n          const response = await this.$axios.get(`/api/payment/status/${orderId}`);\r\n          if (response.data.paid) {\r\n            this.$message.success('支付成功！');\r\n            this.showPayDialog = false;\r\n            // 更新订单状态\r\n            this.currentPayOrder.status = '待发货';\r\n            this.stopCheckPayStatus();\r\n          }\r\n        } catch (error) {\r\n          console.error('检查支付状态失败:', error);\r\n        }\r\n      }, 3000); // 每3秒检查一次\r\n    },\r\n    stopCheckPayStatus() {\r\n      if (this.payStatusTimer) {\r\n        clearInterval(this.payStatusTimer);\r\n        this.payStatusTimer = null;\r\n      }\r\n    },\r\n    confirmReceive(order) {\r\n      console.log('确认收货：', order.id)\r\n    },\r\n    reviewOrder(order) {\r\n      this.$router.push({\r\n        name: 'user-review',\r\n        query: {\r\n          orderId: order.id,\r\n          productId: order.products[0].id // 如果一个订单只有一个商品\r\n        }\r\n      });\r\n    },\r\n    viewOrderDetail(order) {\r\n      this.$router.push(`/user/orders/${order.id}`);\r\n    },\r\n    scrollToOrder(orderId) {\r\n      // 可以添加一些视觉效果，比如高亮显示该订单\r\n      this.$nextTick(() => {\r\n        const orderElement = document.getElementById(`order-${orderId}`);\r\n        if (orderElement) {\r\n          orderElement.scrollIntoView({ behavior: 'smooth' });\r\n          // 可以添加临时的高亮效果\r\n          orderElement.classList.add('highlight');\r\n          setTimeout(() => {\r\n            orderElement.classList.remove('highlight');\r\n          }, 3000);\r\n        }\r\n      });\r\n    },\r\n    /*async addToCart(order) {\r\n      try {\r\n        // 获取订单中的第一个商品\r\n        const product = order.products[0];\r\n        \r\n        const cartData = {\r\n          user_id: 1, // 应该从用户状态中获取\r\n          product_id: product.id,\r\n          quantity: product.quantity,\r\n          shop_id: order.shop_id || 1 // 如果订单中有店铺ID就使用，否则默认为1\r\n        };\r\n\r\n        const response = await this.$axios.post('http://localhost:8081/cart/add', cartData);\r\n        \r\n        if (response.status === 201) {\r\n          this.$message.success('已添加到购物车');\r\n        } else {\r\n          throw new Error(response.data.message || '添加失败');\r\n        }\r\n      } catch (error) {\r\n        this.$message.error(error.message || '添加到购物车失败，请重试');\r\n        console.error('添加到购物车失败:', error);\r\n      }\r\n    }*/\r\n  },\r\n  beforeDestroy() {\r\n    this.stopCheckPayStatus();\r\n    // 清除二维码实例\r\n    if (this.qrCodeInstance) {\r\n      this.qrCodeInstance.clear();\r\n    }\r\n  },\r\n  getStatusText(status) {\r\n      const statusMap = {\r\n        'pending': '待支付',\r\n        'delivered': '待收货',\r\n        'cancelled': '已取消',\r\n        'completed': '已完成'\r\n      }\r\n      return statusMap[status] || status\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.user-orders-container {\r\n  width: 100%;\r\n}\r\n\r\n.user-orders-page {\r\n  background-color: #f5f5f5;\r\n  padding: 20px 0;\r\n  min-height: calc(100vh - 120px);\r\n}\r\n\r\n.orders-container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n\r\n  h2 {\r\n    margin-bottom: 20px;\r\n    font-size: 24px;\r\n    font-weight: normal;\r\n  }\r\n}\r\n\r\n.order-list {\r\n  .order-item {\r\n    background: white;\r\n    border-radius: 8px;\r\n    margin-bottom: 20px;\r\n    overflow: hidden;\r\n\r\n    .order-header {\r\n      padding: 15px 20px;\r\n      border-bottom: 1px solid #eee;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n\r\n      .order-info {\r\n        .order-id {\r\n          margin-right: 20px;\r\n          color: #666;\r\n        }\r\n\r\n        .order-date {\r\n          color: #999;\r\n        }\r\n      }\r\n\r\n      .order-status {\r\n        color: #ff6700;\r\n        font-weight: bold;\r\n      }\r\n    }\r\n\r\n    .order-products {\r\n      padding: 20px;\r\n\r\n      .product-item {\r\n        display: flex;\r\n        gap: 15px;\r\n        padding: 10px 0;\r\n\r\n        img {\r\n          width: 80px;\r\n          height: 80px;\r\n          object-fit: cover;\r\n          border-radius: 4px;\r\n        }\r\n\r\n        .product-info {\r\n          flex: 1;\r\n\r\n          h4 {\r\n            margin: 0 0 5px;\r\n            font-size: 14px;\r\n          }\r\n\r\n          .product-spec {\r\n            color: #999;\r\n            font-size: 12px;\r\n            margin-bottom: 5px;\r\n          }\r\n\r\n          .product-price {\r\n            .price {\r\n              color: #ff6700;\r\n              font-weight: bold;\r\n              margin-right: 10px;\r\n            }\r\n\r\n            .quantity {\r\n              color: #999;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .order-footer {\r\n      padding: 15px 20px;\r\n      border-top: 1px solid #eee;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n\r\n      .order-total {\r\n        color: #666;\r\n\r\n        .total-price {\r\n          color: #ff6700;\r\n          font-weight: bold;\r\n          font-size: 18px;\r\n        }\r\n      }\r\n\r\n      .order-actions {\r\n        display: flex;\r\n        gap: 10px;\r\n      }\r\n    }\r\n\r\n    &.highlight {\r\n      animation: highlight 3s;\r\n    }\r\n  }\r\n}\r\n\r\n.empty-state {\r\n  text-align: center;\r\n  padding: 60px 0;\r\n  color: #999;\r\n\r\n  i {\r\n    font-size: 60px;\r\n    margin-bottom: 20px;\r\n  }\r\n}\r\n\r\n@keyframes highlight {\r\n  0% {\r\n    background-color: #fff1f0;\r\n  }\r\n  100% {\r\n    background-color: white;\r\n  }\r\n}\r\n\r\n.pay-method-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n  padding: 10px 0;\r\n\r\n  .pay-method-btn {\r\n    height: 50px;\r\n    font-size: 16px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 10px;\r\n\r\n    i {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n}\r\n\r\n.pay-dialog-content {\r\n  text-align: center;\r\n  padding: 20px 0;\r\n\r\n  .pay-type-text {\r\n    font-size: 18px;\r\n    color: #333;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .qr-code {\r\n    width: 200px;\r\n    height: 200px;\r\n    margin: 0 auto 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    img {\r\n      max-width: 100%;\r\n      max-height: 100%;\r\n    }\r\n  }\r\n\r\n  .pay-amount {\r\n    font-size: 18px;\r\n    margin-bottom: 15px;\r\n\r\n    .price {\r\n      color: #ff6700;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n\r\n  .pay-tips {\r\n    color: #666;\r\n    \r\n    p {\r\n      margin: 5px 0;\r\n      \r\n      &.small {\r\n        font-size: 12px;\r\n        color: #999;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.dialog-footer {\r\n  text-align: center;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}