{"ast":null,"code":"import { mapGetters } from 'vuex';\nexport default {\n  name: 'UserProfile',\n  data() {\n    const validatePass2 = (rule, value, callback) => {\n      if (value !== this.profileForm.newPassword) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      profileForm: {\n        username: '',\n        email: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      rules: {\n        email: [{\n          required: true,\n          message: '请输入邮箱地址',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: '请输入正确的邮箱地址',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          validator: validatePass2,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(['currentUser'])\n  },\n  created() {\n    this.getUserInfo();\n  },\n  methods: {\n    getUserInfo() {\n      this.$axios.get(`http://localhost:8081/users/detail/${this.currentUser.username}`).then(response => {\n        if (response.data.status === 'success') {\n          const {\n            username,\n            email\n          } = response.data.data;\n          this.profileForm.username = username;\n          this.profileForm.email = email;\n        }\n      });\n    },\n    submitForm() {\n      this.$refs.profileForm.validate(valid => {\n        if (valid) {\n          const updateData = {\n            username: this.profileForm.username,\n            email: this.profileForm.email\n          };\n          if (this.profileForm.newPassword) {\n            updateData.password = this.profileForm.newPassword;\n          }\n          this.$axios.put('http://localhost:8081/users/update', updateData).then(response => {\n            if (response.data.status === 'success') {\n              this.$message.success('个人信息更新成功');\n              this.$store.dispatch('login', {\n                username: this.profileForm.username\n              });\n            }\n          }).catch(error => {\n            this.$message.error('更新失败：' + error.message);\n          });\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.profileForm.resetFields();\n      this.getUserInfo();\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","name","data","validatePass2","rule","value","callback","profileForm","newPassword","Error","username","email","confirmPassword","rules","required","message","trigger","type","validator","computed","created","getUserInfo","methods","$axios","get","currentUser","then","response","status","submitForm","$refs","validate","valid","updateData","password","put","$message","success","$store","dispatch","catch","error","resetForm","resetFields"],"sources":["src/views/UserProfile.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-profile\">\r\n    <div class=\"profile-container\">\r\n      <h2>个人资料</h2>\r\n      <el-form :model=\"profileForm\" :rules=\"rules\" ref=\"profileForm\" label-width=\"100px\">\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"profileForm.username\" disabled></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"邮箱\" prop=\"email\">\r\n          <el-input v-model=\"profileForm.email\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"新密码\" prop=\"newPassword\">\r\n          <el-input type=\"password\" v-model=\"profileForm.newPassword\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"确认密码\" prop=\"confirmPassword\">\r\n          <el-input type=\"password\" v-model=\"profileForm.confirmPassword\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\">保存修改</el-button>\r\n          <el-button @click=\"resetForm\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  name: 'UserProfile',\r\n  data() {\r\n    const validatePass2 = (rule, value, callback) => {\r\n      if (value !== this.profileForm.newPassword) {\r\n        callback(new Error('两次输入密码不一致!'));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      profileForm: {\r\n        username: '',\r\n        email: '',\r\n        newPassword: '',\r\n        confirmPassword: ''\r\n      },\r\n      rules: {\r\n        email: [\r\n          { required: true, message: '请输入邮箱地址', trigger: 'blur' },\r\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\r\n        ],\r\n        confirmPassword: [\r\n          { validator: validatePass2, trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['currentUser'])\r\n  },\r\n  created() {\r\n    this.getUserInfo();\r\n  },\r\n  methods: {\r\n    getUserInfo() {\r\n      this.$axios.get(`http://localhost:8081/users/detail/${this.currentUser.username}`)\r\n        .then(response => {\r\n          if (response.data.status === 'success') {\r\n            const { username, email } = response.data.data;\r\n            this.profileForm.username = username;\r\n            this.profileForm.email = email;\r\n          }\r\n        });\r\n    },\r\n    submitForm() {\r\n      this.$refs.profileForm.validate(valid => {\r\n        if (valid) {\r\n          const updateData = {\r\n            username: this.profileForm.username,\r\n            email: this.profileForm.email\r\n          };\r\n          if (this.profileForm.newPassword) {\r\n            updateData.password = this.profileForm.newPassword;\r\n          }\r\n          \r\n          this.$axios.put('http://localhost:8081/users/update', updateData)\r\n            .then(response => {\r\n              if (response.data.status === 'success') {\r\n                this.$message.success('个人信息更新成功');\r\n                this.$store.dispatch('login', { username: this.profileForm.username });\r\n              }\r\n            })\r\n            .catch(error => {\r\n              this.$message.error('更新失败：' + error.message);\r\n            });\r\n        }\r\n      });\r\n    },\r\n    resetForm() {\r\n      this.$refs.profileForm.resetFields();\r\n      this.getUserInfo();\r\n    }\r\n  }\r\n}\r\n</script> "],"mappings":"AA+BA,SAAAA,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA,MAAAC,aAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA,UAAAE,WAAA,CAAAC,WAAA;QACAF,QAAA,KAAAG,KAAA;MACA;QACAH,QAAA;MACA;IACA;IACA;MACAC,WAAA;QACAG,QAAA;QACAC,KAAA;QACAH,WAAA;QACAI,eAAA;MACA;MACAC,KAAA;QACAF,KAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,IAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,eAAA,GACA;UAAAM,SAAA,EAAAf,aAAA;UAAAa,OAAA;QAAA;MAEA;IACA;EACA;EACAG,QAAA;IACA,GAAAnB,UAAA;EACA;EACAoB,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAD,YAAA;MACA,KAAAE,MAAA,CAAAC,GAAA,4CAAAC,WAAA,CAAAf,QAAA,IACAgB,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAzB,IAAA,CAAA0B,MAAA;UACA;YAAAlB,QAAA;YAAAC;UAAA,IAAAgB,QAAA,CAAAzB,IAAA,CAAAA,IAAA;UACA,KAAAK,WAAA,CAAAG,QAAA,GAAAA,QAAA;UACA,KAAAH,WAAA,CAAAI,KAAA,GAAAA,KAAA;QACA;MACA;IACA;IACAkB,WAAA;MACA,KAAAC,KAAA,CAAAvB,WAAA,CAAAwB,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,MAAAC,UAAA;YACAvB,QAAA,OAAAH,WAAA,CAAAG,QAAA;YACAC,KAAA,OAAAJ,WAAA,CAAAI;UACA;UACA,SAAAJ,WAAA,CAAAC,WAAA;YACAyB,UAAA,CAAAC,QAAA,QAAA3B,WAAA,CAAAC,WAAA;UACA;UAEA,KAAAe,MAAA,CAAAY,GAAA,uCAAAF,UAAA,EACAP,IAAA,CAAAC,QAAA;YACA,IAAAA,QAAA,CAAAzB,IAAA,CAAA0B,MAAA;cACA,KAAAQ,QAAA,CAAAC,OAAA;cACA,KAAAC,MAAA,CAAAC,QAAA;gBAAA7B,QAAA,OAAAH,WAAA,CAAAG;cAAA;YACA;UACA,GACA8B,KAAA,CAAAC,KAAA;YACA,KAAAL,QAAA,CAAAK,KAAA,WAAAA,KAAA,CAAA1B,OAAA;UACA;QACA;MACA;IACA;IACA2B,UAAA;MACA,KAAAZ,KAAA,CAAAvB,WAAA,CAAAoC,WAAA;MACA,KAAAtB,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}