{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    // 用于存储用户信息，从 localStorage 获取初始值。如果没有用户信息，则为 null。\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    // 用于判断用户是否已登录，通过检查 localStorage 中是否存在用户信息来初始化。\n    isAuthenticated: !!localStorage.getItem('user')\n  },\n  getters: {\n    // 返回用户的登录状态\n    isAuthenticated: state => state.isAuthenticated,\n    // 返回当前用户对象\n    currentUser: state => state.user,\n    // 返回用户 ID，如果用户未登录，则返回 null\n    userId: state => state.user ? parseInt(state.user.user_id) : null,\n    // 返回用户名，如果用户未登录，则返回 null\n    username: state => state.user ? state.user.username : null\n  },\n  mutations: {\n    // 设置用户信息和登录状态，同时将用户信息存储到 localStorage 中\n    setUser(state, user) {\n      state.user = user;\n      state.isAuthenticated = !!user;\n      if (user) {\n        // 将用户信息序列化为 JSON 字符串后存储到 localStorage 中\n        localStorage.setItem('user', JSON.stringify(user));\n      } else {\n        // 如果用户信息为空，则清除 localStorage 中的用户信息\n        localStorage.removeItem('user');\n      }\n    },\n    // 清除用户信息和登录状态，同时从 localStorage 中删除用户信息\n    clearUser(state) {\n      state.user = null;\n      state.isAuthenticated = false;\n      localStorage.removeItem('user');\n    }\n  },\n  actions: {\n    /**\r\n     * 用户登录的异步操作：\r\n     * - 向后端发送登录请求验证用户名和密码。\r\n     * - 如果验证通过，获取用户详细信息并更新状态。\r\n     *\r\n     * @param {Object} context - Vuex 提供的上下文对象，包含 commit 等方法。\r\n     * @param {Object} credentials - 包含用户名和密码的对象。\r\n     * @returns {Promise<boolean>} 返回登录是否成功。\r\n     */\n    async login({\n      commit\n    }, credentials) {\n      try {\n        // 创建 FormData，用于传递用户名和密码参数\n        const formData = new FormData();\n        formData.append('username', credentials.username);\n        formData.append('password', credentials.password);\n\n        // 发送登录请求到后端\n        const loginResponse = await fetch('http://localhost:8081/users/login', {\n          method: 'POST',\n          body: formData\n        });\n\n        // 如果登录请求失败，抛出错误\n        if (!loginResponse.ok) {\n          throw new Error('Login failed');\n        }\n\n        // 获取登录响应数据\n        const loginData = await loginResponse.json();\n\n        // 如果登录成功且返回了用户 ID，则获取用户详细信息\n        if (loginData.status === 'success' && loginData.userId) {\n          try {\n            // 根据用户 ID 发送请求获取用户详细信息\n            const detailResponse = await fetch(`http://localhost:8081/users/${loginData.userId}`);\n\n            // 如果请求失败，抛出错误\n            if (!detailResponse.ok) {\n              throw new Error('Failed to fetch user details');\n            }\n\n            // 获取用户详细信息数据\n            const detailData = await detailResponse.json();\n\n            // 如果成功获取到用户详细信息，则更新状态\n            if (detailData.status === 'success' && detailData.data) {\n              commit('setUser', detailData.data); // 更新 Vuex 的 user 状态\n              return true; // 返回登录成功\n            }\n          } catch (error) {\n            console.error('Error fetching user details:', error);\n            return false; // 返回登录失败\n          }\n        }\n        return false; // 如果未获取到用户 ID，返回登录失败\n      } catch (error) {\n        console.error('Login error:', error);\n        return false; // 捕获异常并返回登录失败\n      }\n    },\n    /**\r\n     * 用户登出的操作：\r\n     * - 清除用户信息和登录状态。\r\n     * @param {Object} context - Vuex 提供的上下文对象。\r\n     */\n    logout({\n      commit\n    }) {\n      commit('clearUser'); // 调用 mutation 清除用户信息\n    },\n    /**\r\n     * 更新用户个人信息：\r\n     * - 使用新的用户信息更新状态，同时更新 localStorage 中的用户信息。\r\n     * @param {Object} context - Vuex 提供的上下文对象。\r\n     * @param {Object} updatedProfile - 更新后的用户信息对象。\r\n     */\n    updateUserProfile({\n      commit,\n      state\n    }, updatedProfile) {\n      // 合并当前用户信息和更新后的信息\n      const updatedUser = {\n        ...state.user,\n        ...updatedProfile\n      };\n      commit('setUser', updatedUser); // 更新 Vuex 的 user 状态\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","user","JSON","parse","localStorage","getItem","isAuthenticated","getters","currentUser","userId","parseInt","user_id","username","mutations","setUser","setItem","stringify","removeItem","clearUser","actions","login","commit","credentials","formData","FormData","append","password","loginResponse","fetch","method","body","ok","Error","loginData","json","status","detailResponse","detailData","data","error","console","logout","updateUserProfile","updatedProfile","updatedUser"],"sources":["E:/majorpractice/font_shop/mall/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n  state: {\r\n    // 用于存储用户信息，从 localStorage 获取初始值。如果没有用户信息，则为 null。\r\n    user: JSON.parse(localStorage.getItem('user')) || null,\r\n    // 用于判断用户是否已登录，通过检查 localStorage 中是否存在用户信息来初始化。\r\n    isAuthenticated: !!localStorage.getItem('user')\r\n  },\r\n  getters: {\r\n    // 返回用户的登录状态\r\n    isAuthenticated: state => state.isAuthenticated,\r\n    // 返回当前用户对象\r\n    currentUser: state => state.user,\r\n    // 返回用户 ID，如果用户未登录，则返回 null\r\n    userId: state => state.user ? parseInt(state.user.user_id) : null,\r\n    // 返回用户名，如果用户未登录，则返回 null\r\n    username: state => state.user ? state.user.username : null\r\n  },\r\n  mutations: {\r\n    // 设置用户信息和登录状态，同时将用户信息存储到 localStorage 中\r\n    setUser(state, user) {\r\n      state.user = user;\r\n      state.isAuthenticated = !!user;\r\n      if (user) {\r\n        // 将用户信息序列化为 JSON 字符串后存储到 localStorage 中\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } else {\r\n        // 如果用户信息为空，则清除 localStorage 中的用户信息\r\n        localStorage.removeItem('user');\r\n      }\r\n    },\r\n    // 清除用户信息和登录状态，同时从 localStorage 中删除用户信息\r\n    clearUser(state) {\r\n      state.user = null;\r\n      state.isAuthenticated = false;\r\n      localStorage.removeItem('user');\r\n    }\r\n  },\r\n  actions: {\r\n    /**\r\n     * 用户登录的异步操作：\r\n     * - 向后端发送登录请求验证用户名和密码。\r\n     * - 如果验证通过，获取用户详细信息并更新状态。\r\n     *\r\n     * @param {Object} context - Vuex 提供的上下文对象，包含 commit 等方法。\r\n     * @param {Object} credentials - 包含用户名和密码的对象。\r\n     * @returns {Promise<boolean>} 返回登录是否成功。\r\n     */\r\n    async login({ commit }, credentials) {\r\n      try {\r\n        // 创建 FormData，用于传递用户名和密码参数\r\n        const formData = new FormData();\r\n        formData.append('username', credentials.username);\r\n        formData.append('password', credentials.password);\r\n\r\n        // 发送登录请求到后端\r\n        const loginResponse = await fetch('http://localhost:8081/users/login', {\r\n          method: 'POST',\r\n          body: formData\r\n        });\r\n\r\n        // 如果登录请求失败，抛出错误\r\n        if (!loginResponse.ok) {\r\n          throw new Error('Login failed');\r\n        }\r\n\r\n        // 获取登录响应数据\r\n        const loginData = await loginResponse.json();\r\n\r\n        // 如果登录成功且返回了用户 ID，则获取用户详细信息\r\n        if (loginData.status === 'success' && loginData.userId) {\r\n          try {\r\n            // 根据用户 ID 发送请求获取用户详细信息\r\n            const detailResponse = await fetch(`http://localhost:8081/users/${loginData.userId}`);\r\n\r\n            // 如果请求失败，抛出错误\r\n            if (!detailResponse.ok) {\r\n              throw new Error('Failed to fetch user details');\r\n            }\r\n\r\n            // 获取用户详细信息数据\r\n            const detailData = await detailResponse.json();\r\n\r\n            // 如果成功获取到用户详细信息，则更新状态\r\n            if (detailData.status === 'success' && detailData.data) {\r\n              commit('setUser', detailData.data); // 更新 Vuex 的 user 状态\r\n              return true; // 返回登录成功\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching user details:', error);\r\n            return false; // 返回登录失败\r\n          }\r\n        }\r\n        return false; // 如果未获取到用户 ID，返回登录失败\r\n      } catch (error) {\r\n        console.error('Login error:', error);\r\n        return false; // 捕获异常并返回登录失败\r\n      }\r\n    },\r\n    /**\r\n     * 用户登出的操作：\r\n     * - 清除用户信息和登录状态。\r\n     * @param {Object} context - Vuex 提供的上下文对象。\r\n     */\r\n    logout({ commit }) {\r\n      commit('clearUser'); // 调用 mutation 清除用户信息\r\n    },\r\n    /**\r\n     * 更新用户个人信息：\r\n     * - 使用新的用户信息更新状态，同时更新 localStorage 中的用户信息。\r\n     * @param {Object} context - Vuex 提供的上下文对象。\r\n     * @param {Object} updatedProfile - 更新后的用户信息对象。\r\n     */\r\n    updateUserProfile({ commit, state }, updatedProfile) {\r\n      // 合并当前用户信息和更新后的信息\r\n      const updatedUser = { ...state.user, ...updatedProfile };\r\n      commit('setUser', updatedUser); // 更新 Vuex 的 user 状态\r\n    }\r\n  }\r\n})\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}