{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport EditAdDialog from '@/components/AdDetailsModal.vue';\nimport AddAd from '@/components/AddAd.vue';\nimport AddBanner from '@/components/AddBanner.vue';\nexport default {\n  components: {\n    EditAdDialog,\n    AddAd,\n    AddBanner\n  },\n  data() {\n    return {\n      searchKeyword: '',\n      showAddAdModal: false,\n      showBannerModal: false,\n      editDialogVisible: false,\n      reasonDialogVisible: false,\n      // 控制弹窗显示\n      reason: '',\n      // 存储拒绝原因\n      reason_type: '',\n      searchShop: '',\n      searchType: 'name',\n      // 默认为根据名称搜索\n      advertiseStatus: 'all',\n      // 默认为“全部”状态\n      //categories: ['零食小吃', '酒水饮料', '干货腌货', '即食食品', '农产品'],\n      advertises: [],\n      advertiseall: [],\n      currentPage: 1,\n      pageSize: 10,\n      searchButton: false,\n      searchKey: null,\n      currentAd: null,\n      //当前处理的广告\n      totalItems: 0,\n      // 模拟总商品数\n      showPayMethodDialog: false,\n      showPayDialog: false,\n      payMethod: '',\n      payTypeText: '',\n      qrCodeInstance: null,\n      currentPayAmount: 0,\n      currentPay: null\n    };\n  },\n  computed: {\n    // 过滤后的广告\n    filteredAdvertise() {\n      let filtered = this.advertises;\n\n      // 根据广告状态过滤\n      if (this.advertiseStatus !== 'all') {\n        filtered = filtered.filter(advertise => advertise.status === this.advertiseStatus);\n      }\n\n      // 如果有关键词，进行搜索过滤\n      if (this.searchKey) {\n        filtered = filtered.filter(advertise => {\n          if (this.searchType === 'name') {\n            return advertise.name.toLowerCase().includes(this.searchKey.toLowerCase());\n          } else if (this.searchType === 'shop') {\n            return advertise.shop_name.toLowerCase().includes(this.searchKey.toLowerCase());\n          }\n          return false;\n        });\n      }\n      return filtered;\n    }\n  },\n  methods: {\n    getStatusLabel(status) {\n      const statusMap = {\n        pending: '待审核',\n        approved: '已通过',\n        running: '进行中',\n        rejected: '被打回',\n        expired: '已失效'\n      };\n      return statusMap[status] || '未知'; // 如果没有匹配到，显示“未知”\n    },\n    //关闭详情弹窗\n    closeDialog() {\n      //alert(\"关闭\");\n      this.editDialogVisible = false; // 关闭弹窗\n      this.currentAd = null;\n    },\n    closeBannerModal() {\n      //alert(\"关闭banner\");\n      this.showBannerModal = false; // 关闭弹窗\n    },\n    closeAddAdModal() {\n      //alert(\"关闭\");\n      this.showAddAdModal = false; // 关闭弹窗\n    },\n    //更新状态\n    async updateAd(adId, status, reason) {\n      console.log(adId, status);\n      let x = confirm('强制下线将不会退还您已支付的费用，确定下线吗？');\n      if (x) {\n        try {\n          const response = await axios.post('http://localhost:8081/advertise/status', {\n            advertisement_id: adId,\n            status: status,\n            reason: reason\n          });\n          console.log(response);\n          alert(\"提交成功\");\n          this.fetchAds();\n        } catch (error) {\n          console.error(\"操作出错\", error);\n        }\n      }\n    },\n    // 提交原因\n    submitReason() {\n      if (!this.reason) {\n        this.$message.error('请输入拒绝原因');\n        return;\n      }\n      this.updateAd(this.currentAd.advertisement_id, this.reason_type, this.reason);\n      this.reasonDialogVisible = false;\n      this.reason = ''; // 清空输入的原因\n      this.reason_type = '';\n    },\n    async deleteAd(adId) {\n      // 删除广告逻辑\n      console.log(adId);\n      await axios.delete('http://localhost:8081/advertise/del', {\n        params: {\n          id: adId\n        }\n      });\n      this.fetchAds();\n      //console.log('Deleting ad with ID:', adId); // 使用 adId 变量\n    },\n    //显示详情弹窗\n    showAdvertiseDetails(ad) {\n      this.currentAd = ad; // 将选中的广告数据传递给编辑表单\n      this.editDialogVisible = true; // 显示编辑弹窗\n    },\n    toggleAddAdModal() {\n      this.showAddAdModal = true;\n    },\n    toggleBannerModal() {\n      this.showBannerModal = true;\n    },\n    //显示原因弹窗\n    showReasonDialog(ad, type) {\n      this.currentAd = ad; // 保存当前广告信息\n      this.reasonDialogVisible = true; // 显示弹窗\n      this.reason_type = type;\n    },\n    // 重置原因弹窗\n    resetReasonForm() {\n      this.reason = ''; // 关闭弹窗时清空输入框\n      this.reason_type = '';\n      this.reasonDialogVisible = false;\n    },\n    async fetchAds() {\n      // 获取广告列表\n      // 这里可以调用 API 获取广告列表\n      // 示例数据\n      try {\n        const userid = this.$store.getters.userId;\n        const response = await axios.get('http://localhost:8081/advertise/user', {\n          params: {\n            uid: userid\n          }\n        });\n        console.log(response);\n        this.advertiseall = response.data;\n        this.advertises = response.data.slice(0, 10);\n        this.totalItems = response.data.length;\n        console.log(this.totalItems);\n      } catch (error) {\n        console.error(\"There was an error fetching the ads!\", error);\n      }\n      //this.advertises=[{name:\"hah\",shop:\"12\",type:\"a\"},]\n    },\n    searchAdvertise() {\n      if (this.searchKeyword) {\n        this.searchKey = this.searchKeyword;\n      } else {\n        this.searchKey = null;\n      }\n    },\n    handlePageChange(newPage) {\n      this.currentPage = newPage; // 更新当前页\n      this.advertises = this.advertiseall.slice((this.currentPage - 1) * this.pageSize, this.currentPage * this.pageSize);\n    },\n    async payOrder(data) {\n      console.log(data);\n      //发送支付请求\n      this.currentPay = data;\n      const res = await axios.get('http://localhost:8081/alipay/pay', {\n        params: {\n          id: data.advertisement_id,\n          price: data.price,\n          flag: false\n        }\n      });\n      console.log(res);\n      if (res.status == 200) {\n        console.log(res.status);\n        let htmlContent = res.data;\n        let blob = new Blob([htmlContent], {\n          type: 'text/html'\n        });\n        let url = URL.createObjectURL(blob);\n        let newWindow = window.open(url, '_blank');\n        let ans = 0;\n        while (newWindow && !newWindow.closed) {\n          await new Promise(resolve => setTimeout(resolve, 1000)); // 每秒检查一次\n          ans += 1;\n          if (ans > 180) {\n            //3min自动关闭\n            newWindow.close();\n            break;\n          }\n        }\n        console.log('新窗口已关闭');\n        //检查当前订单状态判断是否删除/\n        const id = data.advertisement_id;\n        const response = await axios.post(`http://localhost:8081/advertise/checkdel?id=${id}`);\n        if (response.status == 200) {\n          alert('申请成功');\n        } else alert('申请失败');\n        //清理资源\n        URL.revokeObjectURL(url);\n      }\n    },\n    cancelPay() {\n      this.$confirm('确定要取消支付吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.showPayDialog = false;\n        this.stopCheckPayStatus();\n        this.deleteAd(this.currentPay.advertisement_id);\n      }).catch(() => {});\n    },\n    async confirmPay() {\n      try {\n        // 调用后端验证支付状态\n        const response = await this.$axios.post('http://localhost:8081/order/pay', {\n          order_id: this.currentPayOrder.order_id,\n          payment_method: this.payTypeText,\n          flag: false\n        });\n        /*\r\n        if (response.data.paid) {\r\n          this.$message.success('支付成功！');\r\n          this.showPayDialog = false;\r\n          // 更新订单状态\r\n          this.currentPayOrder.status = '待发货';\r\n          this.stopCheckPayStatus();\r\n        } else {\r\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\r\n        }*/\n        if (response.status === 201) {\n          this.$message.success('支付成功！');\n          this.showPayDialog = false;\n          // 更新订单状态\n          //this.currentPayOrder.status = '待发货';\n          this.stopCheckPayStatus();\n          this.updateAd(this.currentPay.advertisement_id, 'pending', null); //更新状态为申请状态\n          this.fetchAds();\n        } else {\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\n        }\n      } catch (error) {\n        this.$message.error('验证支付状态失败，请稍后重试');\n        console.error('验证支付失败:', error);\n      }\n    },\n    startCheckPayStatus(orderId) {\n      this.payStatusTimer = setInterval(async () => {\n        try {\n          const response = await this.$axios.get(`/api/payment/status/${orderId}`);\n          if (response.data.paid) {\n            this.$message.success('支付成功！');\n            this.showPayDialog = false;\n            // 更新订单状态\n            this.currentPayOrder.status = '待发货';\n            this.stopCheckPayStatus();\n          }\n        } catch (error) {\n          console.error('检查支付状态失败:', error);\n        }\n      }, 3000); // 每3秒检查一次\n    },\n    stopCheckPayStatus() {\n      if (this.payStatusTimer) {\n        clearInterval(this.payStatusTimer);\n        this.payStatusTimer = null;\n      }\n    }\n  },\n  mounted() {\n    this.fetchAds(); // 获取广告列表\n  }\n};","map":{"version":3,"names":["axios","EditAdDialog","AddAd","AddBanner","components","data","searchKeyword","showAddAdModal","showBannerModal","editDialogVisible","reasonDialogVisible","reason","reason_type","searchShop","searchType","advertiseStatus","advertises","advertiseall","currentPage","pageSize","searchButton","searchKey","currentAd","totalItems","showPayMethodDialog","showPayDialog","payMethod","payTypeText","qrCodeInstance","currentPayAmount","currentPay","computed","filteredAdvertise","filtered","filter","advertise","status","name","toLowerCase","includes","shop_name","methods","getStatusLabel","statusMap","pending","approved","running","rejected","expired","closeDialog","closeBannerModal","closeAddAdModal","updateAd","adId","console","log","x","confirm","response","post","advertisement_id","alert","fetchAds","error","submitReason","$message","deleteAd","delete","params","id","showAdvertiseDetails","ad","toggleAddAdModal","toggleBannerModal","showReasonDialog","type","resetReasonForm","userid","$store","getters","userId","get","uid","slice","length","searchAdvertise","handlePageChange","newPage","payOrder","res","price","flag","htmlContent","blob","Blob","url","URL","createObjectURL","newWindow","window","open","ans","closed","Promise","resolve","setTimeout","close","revokeObjectURL","cancelPay","$confirm","confirmButtonText","cancelButtonText","then","stopCheckPayStatus","catch","confirmPay","$axios","order_id","currentPayOrder","payment_method","success","warning","startCheckPayStatus","orderId","payStatusTimer","setInterval","paid","clearInterval","mounted"],"sources":["src/views/shopmodel/AdManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"ad-management\">\r\n    <h2>广告管理</h2>\r\n\r\n     <!-- 搜索栏和操作按钮（顶部）-->\r\n      <div class=\"search-bar\">\r\n        <div style=\"display: flex; align-items: center;\">\r\n          <!-- 搜索方式选择 -->\r\n          <el-select\r\n            v-model=\"searchType\"\r\n            placeholder=\"请选择搜索方式\"\r\n            style=\"width: 150px; margin-right: 10px;\">\r\n            <el-option label=\"名称\" value=\"name\" />\r\n            <el-option label=\"商铺名\" value=\"shop\" />\r\n          </el-select>\r\n  \r\n          <!-- 搜索框 -->\r\n          <el-input\r\n            v-model=\"searchKeyword\"\r\n            placeholder=\"请输入商品名称或商铺名\"\r\n            style=\"width: 200px; margin-right: 10px;\"\r\n          />\r\n  \r\n          <!-- 搜索按钮 -->\r\n          <el-button @click=\"searchAdvertise\" type=\"primary\">搜索</el-button>\r\n          <!--新增按键-->\r\n          <el-button @click=\"toggleBannerModal\" class=\"add-ad-btn\">添加广告</el-button>\r\n          <el-button @click=\"toggleAddAdModal\" class=\"add-ad-btn\">购买曝光量</el-button>\r\n        </div>\r\n\r\n        <div style=\"margin-top: 10px; display: flex; align-items: center;\">\r\n          <!-- 广告状态选择 -->\r\n          <el-select\r\n            v-model=\"advertiseStatus\"\r\n            placeholder=\"选择广告状态\"\r\n            style=\"width: 200px; margin-right: 10px;\">\r\n            <el-option label=\"全部\" value=\"all\" />\r\n            <el-option label=\"待审核\" value=\"pending\" />\r\n            <el-option label=\"已通过\" value=\"approved\" />\r\n            <el-option label=\"正在进行\" value=\"running\" />\r\n            <el-option label=\"已打回\" value=\"rejected\" />\r\n            <el-option label=\"已失效\" value=\"expired\" />\r\n          </el-select>\r\n        </div>\r\n        <!-- <div style=\"display: flex; align-items: center;\">\r\n            \r\n            <button @click=\"toggleBannerModal\" class=\"add-ad-btn\">添加广告</button>\r\n            <button @click=\"toggleAddAdModal\" class=\"add-ad-btn\">购买曝光量</button>\r\n        </div> -->\r\n      </div>\r\n\r\n    <!-- 使用 el-dialog 替换弹窗 -->\r\n    <el-dialog\r\n      v-model=\"showBannerModal\"\r\n      title=\"添加首页广告\"\r\n      @close=\"closeBannerModal\"\r\n      :visible.sync=\"showBannerModal\"\r\n    >\r\n      <add-banner @close-ad=\"closeBannerModal\" @refresh=\"payOrder\"></add-banner>\r\n    </el-dialog>\r\n\r\n    <!-- 购买曝光量的弹窗 -->\r\n    <el-dialog\r\n      v-model=\"showAddAdModal\"\r\n      title=\"购买曝光量\"\r\n      @close=\"closeAddAdModal\"\r\n      :visible.sync=\"showAddAdModal\"\r\n    >\r\n      <add-ad @close-ad=\"closeAddAdModal\" @refresh=\"payOrder\"></add-ad>\r\n    </el-dialog>\r\n\r\n\r\n    <!-- 商品列表（中部）-->\r\n      <div>\r\n        <el-table :data=\"filteredAdvertise\" style=\"width: 100%\">\r\n          <el-table-column prop=\"name\" label=\"广告名称\" />\r\n          <el-table-column prop=\"shop_name\" label=\"店铺名称\" />\r\n          <el-table-column label=\"广告类型\" >\r\n            <template slot-scope=\"scope\">\r\n                {{ scope.row.advertisement_type === 'shop' ? '店铺推广' : '商品推广'  }}\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column label=\"投放方式\" >\r\n            <template slot-scope=\"scope\">\r\n                {{ scope.row.banner === true ? '首页推广' : '购买曝光量'  }}\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"start_time\" label=\"开始时间\" >\r\n             <template slot-scope=\"scope\">\r\n                {{ scope.row.start_time? new Date(scope.row.start_time).toISOString().split('T')[0] : '暂无'}}\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"end_time\" label=\"结束时间\" >\r\n              <template slot-scope=\"scope\">\r\n                {{ scope.row.end_time? new Date(scope.row.end_time).toISOString().split('T')[0] : '暂无' }}\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"status\" label=\"状态\" >\r\n              <template slot-scope=\"scope\">\r\n    <!-- 根据状态值匹配标签 -->\r\n                {{ getStatusLabel(scope.row.status) }}\r\n              </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"price\" label=\"价格\" />\r\n  \r\n          <el-table-column label=\"操作\" min-width=\"150\">\r\n            <template slot-scope=\"scope\">\r\n              <div style=\"display: flex; justify-content: center; gap: 10px; flex-wrap: nowrap; width: 100%;\">\r\n\r\n              <!-- 强制下线按钮（红色） -->\r\n              <el-button \r\n                v-if=\"scope.row.status === 'approved' || scope.row.status === 'running'|| scope.row.status === 'pending'\" \r\n                @click=\"updateAd(scope.row.advertisement_id,'expired')\" \r\n                size=\"small\" \r\n                type=\"danger\">\r\n                强制下线\r\n              </el-button>\r\n\r\n              <!-- 详情按钮（蓝色） -->\r\n              <el-button \r\n                @click=\"showAdvertiseDetails(scope.row)\" \r\n                size=\"small\" \r\n                type=\"primary\">\r\n                编辑\r\n              </el-button>\r\n              \r\n              </div>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n  \r\n        <!-- 翻页组件 -->\r\n        <el-pagination\r\n          :current-page=\"currentPage\"\r\n          :page-size=\"pageSize\"\r\n          :total=\"totalItems\"\r\n          @current-change=\"handlePageChange\"\r\n          layout=\"prev, pager, next\"\r\n        />\r\n      </div>\r\n\r\n      <!-- 编辑弹窗组件 -->\r\n      <edit-ad-dialog \r\n        :visible.sync=\"editDialogVisible\"\r\n        :adData=\"currentAd\"\r\n        @close-dialog=\"closeDialog\"\r\n        @refresh=\"fetchAds()\"\r\n      />\r\n     \r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport EditAdDialog from '@/components/AdDetailsModal.vue';\r\nimport AddAd from '@/components/AddAd.vue';\r\nimport AddBanner from '@/components/AddBanner.vue';\r\n\r\nexport default {\r\n  components: {\r\n    EditAdDialog,\r\n    AddAd,\r\n    AddBanner\r\n  },\r\n  data() {\r\n    return {\r\n        searchKeyword: '',\r\n        showAddAdModal: false, \r\n        showBannerModal: false, \r\n        editDialogVisible: false,\r\n        reasonDialogVisible: false, // 控制弹窗显示\r\n        reason: '',          // 存储拒绝原因\r\n        reason_type : '',\r\n        searchShop: '',\r\n        searchType: 'name',  // 默认为根据名称搜索\r\n        advertiseStatus: 'all',  // 默认为“全部”状态\r\n        //categories: ['零食小吃', '酒水饮料', '干货腌货', '即食食品', '农产品'],\r\n        advertises: [],\r\n        advertiseall:[],\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        searchButton: false,\r\n        searchKey:null,\r\n        currentAd:null,//当前处理的广告\r\n        totalItems: 0, // 模拟总商品数\r\n        showPayMethodDialog: false,\r\n      showPayDialog: false,\r\n      payMethod: '',\r\n      payTypeText: '',\r\n      qrCodeInstance: null,\r\n      currentPayAmount: 0,\r\n      currentPay: null\r\n      };\r\n  },\r\n  computed: {\r\n        // 过滤后的广告\r\n            filteredAdvertise() {\r\n      let filtered = this.advertises;\r\n\r\n      // 根据广告状态过滤\r\n      if (this.advertiseStatus !== 'all') {\r\n        filtered = filtered.filter(advertise => advertise.status === this.advertiseStatus);\r\n      }\r\n\r\n      // 如果有关键词，进行搜索过滤\r\n      if (this.searchKey) {\r\n        filtered = filtered.filter(advertise => {\r\n          if (this.searchType === 'name') {\r\n            return advertise.name.toLowerCase().includes(this.searchKey.toLowerCase());\r\n          } else if (this.searchType === 'shop') {\r\n            return advertise.shop_name.toLowerCase().includes(this.searchKey.toLowerCase());\r\n          }\r\n          return false;\r\n        });\r\n      }\r\n\r\n      return filtered;\r\n    }\r\n    },\r\n  methods: {\r\n    getStatusLabel(status) {\r\n    const statusMap = {\r\n      pending: '待审核',\r\n      approved: '已通过',\r\n      running: '进行中',\r\n      rejected: '被打回',\r\n      expired: '已失效'\r\n    };\r\n    return statusMap[status] || '未知'; // 如果没有匹配到，显示“未知”\r\n    },\r\n    //关闭详情弹窗\r\n    closeDialog() {\r\n      //alert(\"关闭\");\r\n      this.editDialogVisible = false;  // 关闭弹窗\r\n      this.currentAd = null;\r\n    },\r\n    closeBannerModal() {\r\n      //alert(\"关闭banner\");\r\n      this.showBannerModal = false;  // 关闭弹窗\r\n    },\r\n    closeAddAdModal() {\r\n      //alert(\"关闭\");\r\n      this.showAddAdModal = false;  // 关闭弹窗\r\n    },\r\n    //更新状态\r\n    async updateAd(adId,status,reason){\r\n      console.log(adId,status);\r\n      let x =confirm('强制下线将不会退还您已支付的费用，确定下线吗？');\r\n      if(x){\r\n      try {\r\n        const response = await axios.post('http://localhost:8081/advertise/status',{\r\n            advertisement_id: adId,\r\n            status: status,\r\n            reason: reason\r\n            });\r\n        console.log(response);\r\n        alert(\"提交成功\");\r\n        this.fetchAds();\r\n      } catch (error) {\r\n        console.error(\"操作出错\", error);\r\n      }\r\n      }\r\n    },\r\n    // 提交原因\r\n    submitReason() {\r\n    if (!this.reason) {\r\n      this.$message.error('请输入拒绝原因');\r\n      return;\r\n    }\r\n    this.updateAd(this.currentAd.advertisement_id,this.reason_type,this.reason);\r\n\r\n    this.reasonDialogVisible = false;\r\n    this.reason = '';  // 清空输入的原因\r\n    this.reason_type = '';\r\n  },\r\n  async deleteAd(adId) {\r\n      // 删除广告逻辑\r\n      console.log(adId);\r\n      await axios.delete('http://localhost:8081/advertise/del',{\r\n           params: {id: adId}\r\n        });\r\n      this.fetchAds();\r\n      //console.log('Deleting ad with ID:', adId); // 使用 adId 变量\r\n    },\r\n    //显示详情弹窗\r\n    showAdvertiseDetails(ad){\r\n      this.currentAd = ad;  // 将选中的广告数据传递给编辑表单\r\n      this.editDialogVisible = true;  // 显示编辑弹窗\r\n    },\r\n    toggleAddAdModal() {\r\n      this.showAddAdModal = true;\r\n    },\r\n    toggleBannerModal() {\r\n      this.showBannerModal = true;\r\n    },\r\n    //显示原因弹窗\r\n    showReasonDialog(ad,type) {\r\n    this.currentAd = ad;  // 保存当前广告信息\r\n    this.reasonDialogVisible = true; // 显示弹窗\r\n    this.reason_type = type;\r\n    },\r\n    // 重置原因弹窗\r\n    resetReasonForm() {\r\n      this.reason = '';  // 关闭弹窗时清空输入框\r\n      this.reason_type = '';\r\n      this.reasonDialogVisible=false;\r\n    },\r\n    async fetchAds() {\r\n      // 获取广告列表\r\n      // 这里可以调用 API 获取广告列表\r\n      // 示例数据\r\n      try {\r\n        const userid = this.$store.getters.userId;\r\n        const response = await axios.get('http://localhost:8081/advertise/user',{\r\n            params:{\r\n                uid:userid\r\n            }\r\n        });\r\n        console.log(response)\r\n        this.advertiseall = response.data;\r\n        this.advertises = response.data.slice(0,10); \r\n        this.totalItems = response.data.length;\r\n        console.log(this.totalItems);\r\n      } catch (error) {\r\n        console.error(\"There was an error fetching the ads!\", error);\r\n      }\r\n      //this.advertises=[{name:\"hah\",shop:\"12\",type:\"a\"},]\r\n    },\r\n    searchAdvertise() {\r\n      if (this.searchKeyword) {\r\n          this.searchKey=this.searchKeyword\r\n      }else{\r\n        this.searchKey = null\r\n      }\r\n  },\r\n  handlePageChange(newPage) {\r\n      this.currentPage = newPage; // 更新当前页\r\n      this.advertises = this.advertiseall.slice((this.currentPage-1)*this.pageSize,this.currentPage*this.pageSize);\r\n    },\r\n  async payOrder(data){\r\n    console.log(data);\r\n    //发送支付请求\r\n    this.currentPay = data;\r\n    const res = await axios.get('http://localhost:8081/alipay/pay',{\r\n              params:{\r\n                  id:data.advertisement_id,\r\n                  price:data.price,\r\n                  flag:false\r\n              }\r\n          });\r\n          console.log(res);\r\n          if(res.status == 200){\r\n            console.log(res.status);\r\n            let htmlContent = res.data;\r\n            let blob = new Blob([htmlContent], { type: 'text/html' });\r\n            let url = URL.createObjectURL(blob);\r\n            let newWindow =window.open(url, '_blank');\r\n\r\n            let ans =0 ;\r\n            while(newWindow && !newWindow.closed){\r\n              await new Promise(resolve => setTimeout(resolve, 1000)); // 每秒检查一次\r\n              ans+=1;\r\n              if(ans>180){//3min自动关闭\r\n                newWindow.close();\r\n                break;\r\n              }\r\n            }\r\n            console.log('新窗口已关闭');\r\n            //检查当前订单状态判断是否删除/\r\n            const id = data.advertisement_id;\r\n            const response = await axios.post(`http://localhost:8081/advertise/checkdel?id=${id}`);\r\n              if(response.status == 200){\r\n                alert('申请成功');\r\n              }else alert('申请失败');\r\n            //清理资源\r\n            URL.revokeObjectURL(url);\r\n          }\r\n  },\r\n    cancelPay() {\r\n      this.$confirm('确定要取消支付吗？', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.showPayDialog = false;\r\n        this.stopCheckPayStatus();\r\n        this.deleteAd(this.currentPay.advertisement_id);\r\n      }).catch(() => {});\r\n    },\r\n    async confirmPay() {\r\n      try {\r\n        // 调用后端验证支付状态\r\n        const response = await this.$axios.post('http://localhost:8081/order/pay', {\r\n          order_id: this.currentPayOrder.order_id,\r\n          payment_method:this.payTypeText,\r\n          flag : false\r\n        });\r\n        /*\r\n        if (response.data.paid) {\r\n          this.$message.success('支付成功！');\r\n          this.showPayDialog = false;\r\n          // 更新订单状态\r\n          this.currentPayOrder.status = '待发货';\r\n          this.stopCheckPayStatus();\r\n        } else {\r\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\r\n        }*/\r\n        if (response.status === 201) {\r\n          this.$message.success('支付成功！');\r\n          this.showPayDialog = false;\r\n          // 更新订单状态\r\n          //this.currentPayOrder.status = '待发货';\r\n          this.stopCheckPayStatus();\r\n          this.updateAd(this.currentPay.advertisement_id,'pending',null);//更新状态为申请状态\r\n          this.fetchAds();\r\n        } else {\r\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('验证支付状态失败，请稍后重试');\r\n        console.error('验证支付失败:', error);\r\n      }\r\n    },\r\n    startCheckPayStatus(orderId) {\r\n      this.payStatusTimer = setInterval(async () => {\r\n        try {\r\n          const response = await this.$axios.get(`/api/payment/status/${orderId}`);\r\n          if (response.data.paid) {\r\n            this.$message.success('支付成功！');\r\n            this.showPayDialog = false;\r\n            // 更新订单状态\r\n            this.currentPayOrder.status = '待发货';\r\n            this.stopCheckPayStatus();\r\n          }\r\n        } catch (error) {\r\n          console.error('检查支付状态失败:', error);\r\n        }\r\n      }, 3000); // 每3秒检查一次\r\n    },\r\n    stopCheckPayStatus() {\r\n      if (this.payStatusTimer) {\r\n        clearInterval(this.payStatusTimer);\r\n        this.payStatusTimer = null;\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchAds(); // 获取广告列表\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ad-management {\r\n  padding: 10px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}