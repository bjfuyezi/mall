{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      user_id: null,\n      // 假设扁平化后的数据已经存储在 flattenedCartData 中\n      flattenedCartData: [],\n      cartData: [],\n      // 原始购物车数据\n      /*预期要有的数据：\r\n      * 用户购物车id：cart_item_id【√】\r\n      * 用户id：user_id【√】\r\n      * 商品id：product_id【√】\r\n      * 商品图片url：picture_url[Product数据表中查询到商品的图片json，获取第一个图片id，再获取得到url]【显示】【单独】【√】\r\n      * 商品名称：name[Product数据表中查询]【显示】【√】\r\n      * 规格：flavor【显示】【√】\r\n      * 商品单价：price[Product数据表中查询]【显示】【√】\r\n      * 初始数量：quantity【显示，可调节】【√】\r\n      * 商品的库存量：stock[Product数据表中查询]【单独】【√】\r\n      * 加入时间排序专用：added_time【√】\r\n      * shop_id：商品来自的店铺名【√】\r\n      * selected：是否选中，默认为false【√】\r\n      * available：是否失效，默认为false【√】\r\n      * */\n      loading: false // 加载状态\n    };\n  },\n  computed: {\n    // 将购物车数据扁平化\n    flattening() {\n      // const flattenedData = [];\n      const data = [];\n      this.cartData.forEach(shop => {\n        // 先处理店铺数据\n        data.push({\n          isShop: true,\n          // 标记这是店铺数据\n          selected: false,\n          available: true,\n          shop_id: shop.shop_id,\n          shop_name: shop.shop_name\n        });\n\n        // 再处理店铺里的商品项\n        shop.items.forEach(item => {\n          data.push({\n            isShop: false,\n            // 标记这是商品数据\n            shop_id: shop.shop_id,\n            // 店铺ID\n            shop_name: shop.shop_name,\n            // 店铺名称\n            cart_item_id: item.cart_item_id,\n            // 购物车项ID\n            product_name: item.product_name,\n            // 产品名称\n            product_id: item.product_id,\n            // 产品ID\n            flavor: item.flavor,\n            // 产品口味\n            quantity: item.quantity,\n            // 数量\n            price: item.price,\n            // 单价\n            available: item.available,\n            // 是否可用\n            stock: item.stock,\n            // 库存\n            selected: item.selected,\n            // 是否选中\n            added_time: item.cart_item.added_time,\n            // 加入时间\n            picture_url: item.picture_url,\n            // 产品图片URL\n            user_id: item.user_id // 用户ID\n          });\n        });\n      });\n      return data;\n    },\n    selectAll: {\n      // 计算属性的getter方法，获取购物车所有项的选中状态\n      get() {\n        return this.flattenedCartData.length > 0 &&\n        // 购物车必须非空\n        this.flattenedCartData.every(item => {\n          // 确保所有项都满足特定条件\n          if (item.isShop) {\n            // 如果是店铺项\n            return item.selected; // 店铺项必须被选中\n          } else {\n            // 如果是商品项\n            return !item.available || item.selected; // 商品项要么不可用，要么被选中\n          }\n        });\n      },\n      // 计算属性的setter方法，设置所有商品和店铺项的选中状态\n      set(value) {\n        this.flattenedCartData.forEach(item => {\n          // 如果是店铺项，或者是商品项且商品项是可用的\n          if (item.isShop || !item.isShop && item.available) {\n            item.selected = value; // 设置选中状态为传入的value值\n          }\n        });\n      }\n    },\n    // 总金额\n    totalAmount() {\n      return this.flattenedCartData.filter(item => !item.isShop && item.selected) // 只处理已选中的商品项\n      .reduce((total, item) => total + item.price * item.quantity, 0); // 计算总金额\n    },\n    // 已选择商品数量\n    selectedCount() {\n      return this.flattenedCartData.filter(item => !item.isShop && item.selected) // 只处理已选中的商品项\n      .length;\n    },\n    selectedCartItemIds() {\n      return this.flattenedCartData.filter(item => item.selected && !item.isShop) // 确保只选择商品项且被选中\n      .map(item => item.cart_item_id); // 映射出这些商品项的 ID\n    }\n  },\n  methods: {\n    handleShopSelect(shopItem) {\n      // 切换店铺的选中状态\n      const newSelectedState = !shopItem.selected;\n      // 更新店铺的选中状态\n      this.$set(shopItem, 'selected', newSelectedState);\n      // 更新店铺下所有商品的选中状态\n      this.flattenedCartData.filter(item => item.shop_id === shopItem.shop_id).forEach(item => {\n        // 使用 this.$set() 来确保响应式更新\n        this.$set(item, 'selected', newSelectedState);\n      });\n    },\n    handleSelectAll() {},\n    handleItemSelect(productItem) {\n      // 更新商品的勾选状态\n      const newSelectedState2 = !productItem.selected;\n      // 更新商品的勾选状态\n      this.$set(productItem, 'selected', newSelectedState2);\n      // 获取当前商品所属的店铺 ID\n      const shop_id = productItem.shop_id;\n      // 检查该店铺下所有商品是否都被勾选\n      const allChecked = this.flattenedCartData.filter(item => item.shop_id === shop_id && !item.isShop).every(item => item.selected);\n      // 更新该店铺的勾选状态\n      this.flattenedCartData.filter(item => item.shop_id === shop_id && item.isShop).forEach(shop => {\n        // 使用 this.$set() 来确保响应式更新\n        this.$set(shop, 'selected', allChecked);\n      });\n    },\n    handleQuantityChange(item) {\n      // 处理数量变化\n      console.log('数量变化：', item);\n      // 发送 PUT 请求到后端更新购物车商品数量\n      axios.put('http://localhost:8081/cart/update', item).then(response => {\n        // 请求成功，处理返回的内容\n        console.log(response.data); // 控制台输出返回的信息\n        if (response.data === \"购物车商品数量更新成功\") {\n          // 更新成功后的操作，例如提示用户\n          // this.$message.success('商品数量更新成功');\n        } else {\n          // 更新失败的操作，例如提示用户\n          this.$message.error('更新商品数量失败');\n        }\n      }).catch(error => {\n        // 请求失败，处理错误\n        console.error('更新商品数量请求失败', error);\n        this.$message.error('更新失败：' + error.message);\n      });\n    },\n    // 删除商品\n    removeItem(item) {\n      // 弹出确认对话框\n      this.$confirm('此操作将永久删除该商品, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 用户确认删除，发送 DELETE 请求到后端删除购物车商品\n        axios.delete('http://localhost:8081/cart/delete', {\n          data: item\n        }).then(response => {\n          // 请求成功，处理返回的内容\n          console.log(response.data);\n          if (response.data === \"商品已从购物车中删除\") {\n            // 删除成功后的操作，例如提示用户\n            this.$message.success('商品已从购物车中删除');\n            // 从前端界面移除商品\n            this.flattenedCartData = this.flattenedCartData.filter(i => i.cart_item_id !== item.cart_item_id);\n          } else {\n            // 删除失败的操作，例如提示用户\n            this.$message.error('删除商品失败');\n          }\n        }).catch(error => {\n          // 请求失败，处理错误\n          console.error('删除商品请求失败', error);\n          this.$message.error('删除失败：' + error.message);\n        });\n      }).catch(() => {\n        // 用户取消删除，可以在这里执行取消操作的逻辑\n        this.$message.info('已取消删除');\n      });\n    },\n    // 一次性删除多个商品\n    deleteSelectedItems() {\n      const cartItemIdsToDelete = this.selectedCartItemIds;\n      if (cartItemIdsToDelete.length === 0) {\n        this.$message.warning('请先选择要删除的商品');\n        return;\n      }\n      // 弹出确认对话框\n      this.$confirm('此操作将永久删除选中商品, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 用户确认删除，发送 DELETE 请求到后端\n        const requestBody = {\n          cart_item_ids: cartItemIdsToDelete\n        };\n        axios.delete('http://localhost:8081/cart/deleteMany', {\n          data: requestBody\n        }).then(response => {\n          const message = response.data === \"商品均已从购物车中删除\" ? '商品均已从购物车中删除' : '删除商品失败';\n          this.$message[message === '商品均已从购物车中删除' ? 'success' : 'error'](message);\n          // 重新获取购物车数据以更新前端视图\n          this.getCartData();\n        }).catch(error => {\n          console.error('删除商品请求失败', error);\n          this.$message.error('删除失败：' + error.message);\n        });\n      }).catch(() => {\n        // 用户取消删除，可以在这里执行取消操作的逻辑\n        this.$message.info('已取消批量删除');\n      });\n    },\n    clearInvalidItems() {\n      // 通过 item.available 来获取所有失效的购物车项的 ID\n      const invalidItemIds = this.flattenedCartData.filter(item => !item.available && !item.isShop) // 确保只选择商品项且是失效的\n      .map(item => item.cart_item_id); // 映射出这些商品项的 ID\n\n      if (invalidItemIds.length === 0) {\n        this.$message.info('没有失效的商品需要删除');\n        return;\n      }\n      // 弹出确认对话框\n      this.$confirm('此操作将永久删除失效商品, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const requestBody = {\n          cart_item_ids: invalidItemIds\n        };\n        // 用户确认删除，发送 POST 请求到后端删除失效的购物车商品\n        axios.delete('http://localhost:8081/cart/deleteMany', {\n          data: requestBody\n        }).then(response => {\n          // 请求成功，处理返回的内容\n          console.log(response.data);\n          if (response.data === \"商品均已从购物车中删除\") {\n            // 删除成功后的操作，例如提示用户\n            this.$message.success('失效商品已从购物车中删除');\n            // 重新获取购物车数据以更新前端视图\n            this.getCartData();\n          } else {\n            // 删除失败的操作，例如提示用户\n            this.$message.error('删除失效商品失败');\n          }\n        }).catch(error => {\n          // 请求失败，处理错误\n          console.error('删除失效商品请求失败', error);\n          this.$message.error('删除失败：' + error.message);\n        });\n      }).catch(() => {\n        // 用户取消删除，可以在这里执行取消操作的逻辑\n        this.$message.info('已取消删除失效商品');\n      });\n    },\n    //   TODO:将选中的商品移入收藏夹\n    MoveToFavorite() {},\n    // 结算\n    checkout() {\n      //TODO:选中商品，得到cart_item_id数组，去后端判断哪些优惠券可以使用，再跳转到选择优惠券页面\n      // console.log(\"结算\");\n    },\n    toggleShopAvailabilityBasedOnItems(shopId) {\n      // 首先，找到与给定 shop_id 相关联的所有商品项\n      const items = this.flattenedCartData.filter(item => item.shop_id === shopId && !item.isShop);\n\n      // 检查这些商品项的 available 属性是否都为 false\n      const areAllItemsUnavailable = items.every(item => !item.available);\n\n      // 如果所有商品项都不可用，更新店铺的 available 状态\n      if (areAllItemsUnavailable) {\n        // 找到对应的店铺项并更新其 available 状态\n        const shopItem = this.flattenedCartData.find(item => item.isShop && item.shop_id === shopId);\n        if (shopItem) {\n          this.$set(shopItem, 'available', false);\n        }\n      }\n    },\n    async getCartData() {\n      this.loading = true;\n      this.user_id = this.$store.getters.userId; // 获取用户ID\n      console.log(\"当前用户id为：\" + this.user_id);\n      try {\n        const cartResponse = await axios.get('http://localhost:8081/cart/items', {\n          params: {\n            user_id: this.user_id\n          }\n        });\n        if (cartResponse.data != null) {\n          // console.log(\"get回复：\"+cartResponse.data);\n          this.cartData = cartResponse.data;\n          // 触发数据扁平化\n          this.flattenedCartData = this.flattening; // 直接调用计算属性\n          // console.log(\"扁平化数据：\"+this.flattenedCartData);\n          // 遍历每个店铺，更新其 available 状态\n          this.cartData.forEach(shop => {\n            this.toggleShopAvailabilityBasedOnItems(shop.shop_id);\n          });\n        }\n      } catch (error) {\n        console.error(\"获取购物车数据失败\", error);\n      } finally {\n        this.loading = false;\n      }\n    }\n  },\n  created() {\n    console.log('商品数据加载开始');\n    this.getCartData();\n    console.log('商品数据加载完成');\n    // 模拟从后端获取数据\n    this.loading = false;\n  }\n};","map":{"version":3,"names":["axios","data","user_id","flattenedCartData","cartData","loading","computed","flattening","forEach","shop","push","isShop","selected","available","shop_id","shop_name","items","item","cart_item_id","product_name","product_id","flavor","quantity","price","stock","added_time","cart_item","picture_url","selectAll","get","length","every","set","value","totalAmount","filter","reduce","total","selectedCount","selectedCartItemIds","map","methods","handleShopSelect","shopItem","newSelectedState","$set","handleSelectAll","handleItemSelect","productItem","newSelectedState2","allChecked","handleQuantityChange","console","log","put","then","response","$message","error","catch","message","removeItem","$confirm","confirmButtonText","cancelButtonText","type","delete","success","i","info","deleteSelectedItems","cartItemIdsToDelete","warning","requestBody","cart_item_ids","getCartData","clearInvalidItems","invalidItemIds","MoveToFavorite","checkout","toggleShopAvailabilityBasedOnItems","shopId","areAllItemsUnavailable","find","$store","getters","userId","cartResponse","params","created"],"sources":["src/views/usermodel/UserCartView.vue"],"sourcesContent":["<template>\r\n  <div class=\"cart-page\">\r\n    <div class=\"cart-container\">\r\n      <!-- 购物车头部 -->\r\n      <div class=\"cart-header\">\r\n        <h2>我的购物车</h2>\r\n        <!-- 清除失效商品按钮 -->\r\n        <el-button type=\"text\" @click=\"clearInvalidItems\">\r\n          <i class=\"el-icon-delete\"></i> 清除失效商品\r\n        </el-button>\r\n      </div>\r\n\r\n      <!-- 购物车主体，若购物车有商品 -->\r\n\r\n      <div class=\"cart-main\" v-if=\"cartData.length > 0\">\r\n        <!-- 表头 -->\r\n        <div class=\"cart-table-header\">\r\n          <el-checkbox\r\n              v-model=\"selectAll\"\r\n              @change=\"handleSelectAll\"\r\n          >全选</el-checkbox>\r\n          <span class=\"column-product\">商品信息</span>\r\n          <span class=\"column-price\">单价</span>\r\n          <span class=\"column-quantity\">数量</span>\r\n          <span class=\"column-total\">小计</span>\r\n          <span class=\"column-action\">操作</span>\r\n        </div>\r\n\r\n        <div class=\"cart-items\">\r\n          <div\r\n              v-for=\"(item, index) in flattenedCartData\"\r\n              :key=\"index\"\r\n              class=\"cart-item\"\r\n              :class=\"{ 'item-invalid': !item.available }\"\r\n          >\r\n            <el-checkbox\r\n                v-if=\"!item.isShop\"\r\n                :value=\"item.selected\"\r\n                :disabled=\"!item.available\"\r\n                @change=\"handleItemSelect(item)\"\r\n            ></el-checkbox>\r\n\r\n            <div v-if=\"item.isShop\">\r\n              <!-- 商铺复选框 -->\r\n              <el-checkbox\r\n                  :value=\"item.selected\"\r\n                  :disabled=\"!item.available\"\r\n                  @change=\"handleShopSelect(item)\">\r\n                店铺：{{ item.shop_name }}\r\n              </el-checkbox>\r\n            </div>\r\n            <div class=\"item-product\" v-else>\r\n              <img :src=\"'http://localhost:8081'+item.picture_url\" alt=\"商品图片\"/>\r\n              <div class=\"product-info\">\r\n                <h3>{{ item.product_name }}</h3>\r\n                <p class=\"specs\">{{ item.flavor }}</p>\r\n                <p class=\"status\" v-if=\"!item.available\">该商品已下架</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"item-price\" >\r\n              <div v-if=\"!item.isShop\">\r\n                <span class=\"current-price\">¥{{ item.price.toFixed(2) }}</span>\r\n                <span class=\"original-price\" v-if=\"item.originalPrice\">¥{{ item.originalPrice.toFixed(2) }}</span>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"item-quantity\">\r\n              <el-input-number\r\n                  v-if=\"!item.isShop\"\r\n                  v-model=\"item.quantity\"\r\n                  :min=\"1\"\r\n                  :max=\"item.stock\"\r\n                  :disabled=\"!item.available\"\r\n                  @change=\"handleQuantityChange(item)\"\r\n              ></el-input-number>\r\n            </div>\r\n\r\n            <div class=\"item-total\">\r\n              <div v-if=\"!item.isShop\">\r\n                ¥{{ (item.price * item.quantity).toFixed(2) }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"item-action\">\r\n              <el-button v-if=\"!item.isShop\" type=\"danger\" size=\"mini\" :disabled=\"!item.available\" @click=\"removeItem(item)\">删除</el-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <!-- 空购物车提示 -->\r\n      <div v-else class=\"empty-cart\">\r\n        <i class=\"el-icon-shopping-cart-2\"></i>\r\n        <p>购物车还是空的</p>\r\n        <!-- 按钮跳转到商品页 -->\r\n        <el-button type=\"primary\" @click=\"$router.push('/')\">去首页逛逛</el-button>\r\n      </div>\r\n\r\n      <!-- 底部操作栏 -->\r\n      <div class=\"cart-footer\" v-if=\"cartData.length > 0\">\r\n        <div class=\"footer-left\">\r\n          <el-checkbox\r\n              v-model=\"selectAll\"\r\n              @change=\"handleSelectAll\"\r\n          >全选</el-checkbox>\r\n          <el-button type=\"text\" @click=\"deleteSelectedItems\">删除选中商品</el-button>\r\n          <el-button type=\"text\" @click=\"MoveToFavorite\">移入收藏夹</el-button>\r\n        </div>\r\n        <div class=\"footer-right\">\r\n          <div class=\"selected-info\">\r\n            已选择 <span>{{ selectedCount }}</span> 件商品\r\n            <div class=\"total-price\">\r\n              合计：<span>¥{{ totalAmount.toFixed(2) }}</span>\r\n            </div>\r\n          </div>\r\n          <el-button\r\n              type=\"primary\"\r\n              size=\"large\"\r\n              :disabled=\"totalAmount === 0\"\r\n              @click=\"checkout\"\r\n          >\r\n            立即结算\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      user_id:null,\r\n      // 假设扁平化后的数据已经存储在 flattenedCartData 中\r\n      flattenedCartData: [],\r\n      cartData : [], // 原始购物车数据\r\n      /*预期要有的数据：\r\n      * 用户购物车id：cart_item_id【√】\r\n      * 用户id：user_id【√】\r\n      * 商品id：product_id【√】\r\n      * 商品图片url：picture_url[Product数据表中查询到商品的图片json，获取第一个图片id，再获取得到url]【显示】【单独】【√】\r\n      * 商品名称：name[Product数据表中查询]【显示】【√】\r\n      * 规格：flavor【显示】【√】\r\n      * 商品单价：price[Product数据表中查询]【显示】【√】\r\n      * 初始数量：quantity【显示，可调节】【√】\r\n      * 商品的库存量：stock[Product数据表中查询]【单独】【√】\r\n      * 加入时间排序专用：added_time【√】\r\n      * shop_id：商品来自的店铺名【√】\r\n      * selected：是否选中，默认为false【√】\r\n      * available：是否失效，默认为false【√】\r\n      * */\r\n      loading: false, // 加载状态\r\n    };\r\n  },\r\n  computed: {\r\n    // 将购物车数据扁平化\r\n    flattening() {\r\n      // const flattenedData = [];\r\n      const data = [];\r\n      this.cartData.forEach(shop => {\r\n        // 先处理店铺数据\r\n        data.push({\r\n          isShop: true, // 标记这是店铺数据\r\n          selected:false,\r\n          available:true,\r\n          shop_id: shop.shop_id,\r\n          shop_name: shop.shop_name,\r\n        });\r\n\r\n        // 再处理店铺里的商品项\r\n        shop.items.forEach(item => {\r\n          data.push({\r\n            isShop: false, // 标记这是商品数据\r\n            shop_id: shop.shop_id, // 店铺ID\r\n            shop_name: shop.shop_name, // 店铺名称\r\n            cart_item_id: item.cart_item_id, // 购物车项ID\r\n            product_name: item.product_name, // 产品名称\r\n            product_id: item.product_id, // 产品ID\r\n            flavor: item.flavor, // 产品口味\r\n            quantity: item.quantity, // 数量\r\n            price: item.price, // 单价\r\n            available: item.available, // 是否可用\r\n            stock: item.stock, // 库存\r\n            selected: item.selected, // 是否选中\r\n            added_time: item.cart_item.added_time, // 加入时间\r\n            picture_url: item.picture_url, // 产品图片URL\r\n            user_id: item.user_id, // 用户ID\r\n          });\r\n        });\r\n      });\r\n      return data;\r\n    },\r\n\r\n    selectAll: {\r\n      // 计算属性的getter方法，获取购物车所有项的选中状态\r\n      get() {\r\n        return this.flattenedCartData.length > 0 && // 购物车必须非空\r\n            this.flattenedCartData.every(item => { // 确保所有项都满足特定条件\r\n              if (item.isShop) { // 如果是店铺项\r\n                return item.selected; // 店铺项必须被选中\r\n              } else { // 如果是商品项\r\n                return !item.available || item.selected; // 商品项要么不可用，要么被选中\r\n              }\r\n            });\r\n      },\r\n      // 计算属性的setter方法，设置所有商品和店铺项的选中状态\r\n      set(value) {\r\n        this.flattenedCartData.forEach(item => {\r\n          // 如果是店铺项，或者是商品项且商品项是可用的\r\n          if (item.isShop || (!item.isShop && item.available)) {\r\n            item.selected = value; // 设置选中状态为传入的value值\r\n          }\r\n        });\r\n      }\r\n    },\r\n    // 总金额\r\n    totalAmount() {\r\n      return this.flattenedCartData\r\n          .filter(item => !item.isShop && item.selected) // 只处理已选中的商品项\r\n          .reduce((total, item) => total + item.price * item.quantity, 0); // 计算总金额\r\n    },\r\n    // 已选择商品数量\r\n    selectedCount() {\r\n      return this.flattenedCartData\r\n          .filter(item => !item.isShop && item.selected) // 只处理已选中的商品项\r\n          .length;\r\n    },\r\n    selectedCartItemIds() {\r\n      return this.flattenedCartData\r\n          .filter(item => item.selected && !item.isShop) // 确保只选择商品项且被选中\r\n          .map(item => item.cart_item_id); // 映射出这些商品项的 ID\r\n    },\r\n  },\r\n  methods: {\r\n    handleShopSelect(shopItem) {\r\n      // 切换店铺的选中状态\r\n      const newSelectedState = !shopItem.selected;\r\n      // 更新店铺的选中状态\r\n      this.$set(shopItem, 'selected', newSelectedState);\r\n      // 更新店铺下所有商品的选中状态\r\n      this.flattenedCartData\r\n          .filter(item => item.shop_id === shopItem.shop_id)\r\n          .forEach(item => {\r\n            // 使用 this.$set() 来确保响应式更新\r\n            this.$set(item, 'selected', newSelectedState);\r\n          });\r\n    },\r\n    handleSelectAll() {\r\n    },\r\n    handleItemSelect(productItem) {\r\n      // 更新商品的勾选状态\r\n      const newSelectedState2 = !productItem.selected;\r\n      // 更新商品的勾选状态\r\n      this.$set(productItem, 'selected', newSelectedState2);\r\n      // 获取当前商品所属的店铺 ID\r\n      const shop_id = productItem.shop_id;\r\n      // 检查该店铺下所有商品是否都被勾选\r\n      const allChecked = this.flattenedCartData\r\n          .filter(item => item.shop_id === shop_id && !item.isShop)\r\n          .every(item => item.selected);\r\n      // 更新该店铺的勾选状态\r\n      this.flattenedCartData\r\n          .filter(item => item.shop_id === shop_id && item.isShop)\r\n          .forEach(shop => {\r\n            // 使用 this.$set() 来确保响应式更新\r\n            this.$set(shop, 'selected', allChecked);\r\n          });\r\n    },\r\n    handleQuantityChange(item) {\r\n      // 处理数量变化\r\n      console.log('数量变化：', item)\r\n      // 发送 PUT 请求到后端更新购物车商品数量\r\n      axios.put('http://localhost:8081/cart/update', item)\r\n          .then(response => {\r\n            // 请求成功，处理返回的内容\r\n            console.log(response.data); // 控制台输出返回的信息\r\n            if (response.data === \"购物车商品数量更新成功\") {\r\n              // 更新成功后的操作，例如提示用户\r\n              // this.$message.success('商品数量更新成功');\r\n            } else {\r\n              // 更新失败的操作，例如提示用户\r\n              this.$message.error('更新商品数量失败');\r\n            }\r\n          })\r\n          .catch(error => {\r\n            // 请求失败，处理错误\r\n            console.error('更新商品数量请求失败', error);\r\n            this.$message.error('更新失败：' + error.message);\r\n          });\r\n    },\r\n    // 删除商品\r\n    removeItem(item) {\r\n      // 弹出确认对话框\r\n      this.$confirm('此操作将永久删除该商品, 是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        // 用户确认删除，发送 DELETE 请求到后端删除购物车商品\r\n        axios.delete('http://localhost:8081/cart/delete', { data: item })\r\n            .then(response => {\r\n              // 请求成功，处理返回的内容\r\n              console.log(response.data);\r\n              if (response.data === \"商品已从购物车中删除\") {\r\n                // 删除成功后的操作，例如提示用户\r\n                this.$message.success('商品已从购物车中删除');\r\n                // 从前端界面移除商品\r\n                this.flattenedCartData = this.flattenedCartData.filter(i => i.cart_item_id !== item.cart_item_id);\r\n              } else {\r\n                // 删除失败的操作，例如提示用户\r\n                this.$message.error('删除商品失败');\r\n              }\r\n            })\r\n            .catch(error => {\r\n              // 请求失败，处理错误\r\n              console.error('删除商品请求失败', error);\r\n              this.$message.error('删除失败：' + error.message);\r\n            });\r\n      }).catch(() => {\r\n        // 用户取消删除，可以在这里执行取消操作的逻辑\r\n        this.$message.info('已取消删除');\r\n      });\r\n    },\r\n    // 一次性删除多个商品\r\n    deleteSelectedItems() {\r\n      const cartItemIdsToDelete = this.selectedCartItemIds;\r\n      if (cartItemIdsToDelete.length === 0) {\r\n        this.$message.warning('请先选择要删除的商品');\r\n        return;\r\n      }\r\n      // 弹出确认对话框\r\n      this.$confirm('此操作将永久删除选中商品, 是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        // 用户确认删除，发送 DELETE 请求到后端\r\n        const requestBody = {\r\n          cart_item_ids: cartItemIdsToDelete\r\n        };\r\n        axios.delete('http://localhost:8081/cart/deleteMany', { data: requestBody })\r\n            .then(response => {\r\n              const message = response.data === \"商品均已从购物车中删除\" ? '商品均已从购物车中删除' : '删除商品失败';\r\n              this.$message[message === '商品均已从购物车中删除' ? 'success' : 'error'](message);\r\n              // 重新获取购物车数据以更新前端视图\r\n              this.getCartData();\r\n            })\r\n            .catch(error => {\r\n              console.error('删除商品请求失败', error);\r\n              this.$message.error('删除失败：' + error.message);\r\n            });\r\n      }).catch(() => {\r\n        // 用户取消删除，可以在这里执行取消操作的逻辑\r\n        this.$message.info('已取消批量删除');\r\n      });\r\n    },\r\n    clearInvalidItems(){\r\n      // 通过 item.available 来获取所有失效的购物车项的 ID\r\n      const invalidItemIds = this.flattenedCartData\r\n          .filter(item => !item.available && !item.isShop) // 确保只选择商品项且是失效的\r\n          .map(item => item.cart_item_id); // 映射出这些商品项的 ID\r\n\r\n      if (invalidItemIds.length === 0) {\r\n        this.$message.info('没有失效的商品需要删除');\r\n        return;\r\n      }\r\n      // 弹出确认对话框\r\n      this.$confirm('此操作将永久删除失效商品, 是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        const requestBody = {\r\n          cart_item_ids: invalidItemIds\r\n        };\r\n        // 用户确认删除，发送 POST 请求到后端删除失效的购物车商品\r\n        axios.delete('http://localhost:8081/cart/deleteMany', { data: requestBody })\r\n            .then(response => {\r\n              // 请求成功，处理返回的内容\r\n              console.log(response.data);\r\n              if (response.data === \"商品均已从购物车中删除\") {\r\n                // 删除成功后的操作，例如提示用户\r\n                this.$message.success('失效商品已从购物车中删除');\r\n                // 重新获取购物车数据以更新前端视图\r\n                this.getCartData();\r\n              } else {\r\n                // 删除失败的操作，例如提示用户\r\n                this.$message.error('删除失效商品失败');\r\n              }\r\n            })\r\n            .catch(error => {\r\n              // 请求失败，处理错误\r\n              console.error('删除失效商品请求失败', error);\r\n              this.$message.error('删除失败：' + error.message);\r\n            });\r\n      }).catch(() => {\r\n        // 用户取消删除，可以在这里执行取消操作的逻辑\r\n        this.$message.info('已取消删除失效商品');\r\n      });\r\n    },\r\n    //   TODO:将选中的商品移入收藏夹\r\n    MoveToFavorite(){\r\n\r\n    },\r\n    // 结算\r\n    checkout() {\r\n      //TODO:选中商品，得到cart_item_id数组，去后端判断哪些优惠券可以使用，再跳转到选择优惠券页面\r\n      // console.log(\"结算\");\r\n    },\r\n    toggleShopAvailabilityBasedOnItems(shopId) {\r\n      // 首先，找到与给定 shop_id 相关联的所有商品项\r\n      const items = this.flattenedCartData.filter(item => item.shop_id === shopId && !item.isShop);\r\n\r\n      // 检查这些商品项的 available 属性是否都为 false\r\n      const areAllItemsUnavailable = items.every(item => !item.available);\r\n\r\n      // 如果所有商品项都不可用，更新店铺的 available 状态\r\n      if (areAllItemsUnavailable) {\r\n        // 找到对应的店铺项并更新其 available 状态\r\n        const shopItem = this.flattenedCartData.find(item => item.isShop && item.shop_id === shopId);\r\n        if (shopItem) {\r\n          this.$set(shopItem, 'available', false);\r\n        }\r\n      }\r\n    },\r\n    async getCartData() {\r\n      this.loading = true;\r\n      this.user_id = this.$store.getters.userId; // 获取用户ID\r\n      console.log(\"当前用户id为：\" + this.user_id);\r\n\r\n      try {\r\n        const cartResponse = await axios.get('http://localhost:8081/cart/items', {\r\n          params: { user_id: this.user_id }\r\n        });\r\n        if (cartResponse.data != null) {\r\n          // console.log(\"get回复：\"+cartResponse.data);\r\n          this.cartData = cartResponse.data;\r\n          // 触发数据扁平化\r\n          this.flattenedCartData = this.flattening;  // 直接调用计算属性\r\n          // console.log(\"扁平化数据：\"+this.flattenedCartData);\r\n          // 遍历每个店铺，更新其 available 状态\r\n          this.cartData.forEach(shop => {\r\n            this.toggleShopAvailabilityBasedOnItems(shop.shop_id);\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(\"获取购物车数据失败\", error);\r\n      }finally {\r\n        this.loading = false;\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    console.log('商品数据加载开始');\r\n    this.getCartData();\r\n    console.log('商品数据加载完成');\r\n    // 模拟从后端获取数据\r\n    this.loading = false;\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.cart-page {\r\n  background-color: #f5f5f5; /* 设置页面背景颜色为淡灰色 */\r\n  padding: 20px 0; /* 设置上下内边距为 20px，左右内边距为 0 */\r\n  min-height: calc(100vh - 120px); /* 设置最小高度为视口高度减去 120px，确保页面内容至少填充视口高度 */\r\n}\r\n\r\n.cart-container {\r\n  max-width: 1200px; /* 设置容器的最大宽度为 1200px，确保容器不会过宽 */\r\n  margin: 0 auto; /* 设置左右外边距为 auto，使容器水平居中对齐 */\r\n  background-color: #fff; /* 设置容器的背景颜色为白色 */\r\n  border-radius: 8px; /* 设置容器的边角圆滑度为 8px，创建圆角效果 */\r\n  padding: 20px; /* 设置容器内边距为 20px，确保内容与边界之间有适当的空间 */\r\n}\r\n\r\n.cart-header {\r\n  display: flex; /* 使用 flexbox 布局，允许内部元素灵活排列 */\r\n  justify-content: space-between; /* 在水平方向上，左右两侧元素分开对齐，且间距均匀 */\r\n  align-items: center; /* 在垂直方向上，确保子元素垂直居中对齐 */\r\n  padding-bottom: 20px; /* 设置底部内边距为 20px，确保内容与底部有适当间距 */\r\n  border-bottom: 1px solid #eee; /* 添加一个浅灰色的底部边框，用于分隔头部与下面的内容 */\r\n\r\n  h2 {\r\n    font-size: 20px; /* 设置标题字体大小为 20px */\r\n    font-weight: normal; /* 设置标题字体为常规粗细 */\r\n  }\r\n}\r\n\r\n\r\n.empty-cart {\r\n  text-align: center; /* 内容水平居中 */\r\n  padding: 60px 0; /* 上下内边距 60px，左右内边距为 0 */\r\n  color: #999; /* 字体颜色设为浅灰色 */\r\n\r\n  i {\r\n    font-size: 60px; /* 图标字体大小 60px */\r\n    margin-bottom: 20px; /* 图标下方的间距 20px */\r\n  }\r\n\r\n  .el-button {\r\n    margin-top: 20px; /* 按钮与上方内容的间距为 20px */\r\n  }\r\n}\r\n\r\n.cart-table-header {\r\n  display: grid;\r\n  grid-template-columns: 1fr 4fr 1fr 2fr 1fr 2fr;\r\n  align-items: center;\r\n  padding: 15px 0;\r\n  background-color: #f8f8f8;\r\n  margin: 20px 0;\r\n  border-radius: 4px;\r\n\r\n  span {\r\n    text-align: center;\r\n    color: #666;\r\n  }\r\n}\r\n\r\n.cart-item {\r\n  display: grid; /* 使用 grid 布局 */\r\n  grid-template-columns: 1fr 4fr 1fr 2fr 1fr 2fr; /* 设置网格布局的列宽，分别占 1fr, 4fr, 1fr, 2fr, 1fr, 2fr */\r\n  align-items: center; /* 使子元素垂直居中对齐 */\r\n  padding: 20px 0; /* 设置上下内边距 */\r\n  border-bottom: 1px solid #eee; /* 为每个购物车项添加底部边框，颜色为浅灰色 */\r\n\r\n  &.item-invalid {\r\n    opacity: 0.5; /* 为无效商品项设置透明度为 0.5 */\r\n  }\r\n\r\n  /* 商品信息区域 */\r\n  .item-product {\r\n    display: flex; /* 使用 flex 布局来排列图片和商品信息 */\r\n    gap: 15px; /* 图片和商品信息之间有 15px 的间距 */\r\n    flex-direction: row; /* 将商品图片和信息在水平方向上排列，默认情况下是纵向排列 */\r\n\r\n    img {\r\n      width: 80px; /* 图片的宽度为 80px */\r\n      height: 80px; /* 图片的高度为 80px */\r\n      object-fit: cover; /* 保证图片完全覆盖容器并保持比例，可能会裁剪图片 */\r\n      border-radius: 4px; /* 为图片添加 4px 的圆角 */\r\n    }\r\n\r\n    .product-info {\r\n      flex: 1; /* 使商品信息区域占据剩余的可用空间 */\r\n      display: flex; /* 使用 flex 布局排列商品信息 */\r\n      flex-direction: column; /* 商品信息内容垂直排列 */\r\n      gap: 8px; /* 每个子元素之间有 8px 的间距 */\r\n\r\n      h3 {\r\n        font-size: 14px; /* 商品标题字体大小为 14px */\r\n        margin: 0; /* 消除标题的外边距 */\r\n      }\r\n\r\n      .specs {\r\n        color: #999; /* 规格文本颜色为浅灰色 */\r\n        font-size: 12px; /* 规格文本字体大小为 12px */\r\n      }\r\n\r\n      .status {\r\n        color: #ff4d4f; /* 商品状态文本颜色为红色 */\r\n        font-size: 12px; /* 商品状态字体大小为 12px */\r\n      }\r\n    }\r\n  }\r\n\r\n  /* 价格区域 */\r\n  .item-price {\r\n    text-align: center; /* 让价格居中显示 */\r\n\r\n    .current-price {\r\n      color: #ff6700; /* 当前价格的颜色为橙色 */\r\n      font-size: 16px; /* 当前价格的字体大小为 16px */\r\n    }\r\n\r\n    .original-price {\r\n      color: #999; /* 原价的颜色为灰色 */\r\n      font-size: 12px; /* 原价的字体大小为 12px */\r\n      text-decoration: line-through; /* 原价添加删除线效果 */\r\n      margin-left: 5px; /* 原价左侧有 5px 的外边距 */\r\n    }\r\n  }\r\n\r\n  /* 数量区域 */\r\n  .item-quantity {\r\n    text-align: center; /* 使数量居中显示 */\r\n\r\n    .stock {\r\n      color: #ff4d4f; /* 库存数量文本颜色为红色 */\r\n      font-size: 12px; /* 库存数量的字体大小为 12px */\r\n      margin-top: 5px; /* 库存数量的上边距为 5px */\r\n    }\r\n  }\r\n\r\n  /* 总价区域 */\r\n  .item-total {\r\n    text-align: center; /* 使总价居中显示 */\r\n    color: #ff6700; /* 总价的颜色为橙色 */\r\n    font-size: 16px; /* 总价的字体大小为 16px */\r\n    font-weight: bold; /* 总价的字体加粗 */\r\n  }\r\n\r\n  /* 操作区域 */\r\n  .item-action {\r\n    text-align: center; /* 使操作区域内容居中 */\r\n    display: flex; /* 使用 flex 布局排列操作按钮 */\r\n    flex-direction: row; /* 操作按钮水平排列 */\r\n    justify-content: center; /* 水平居中 */\r\n    align-items: center; /* 垂直居中 */\r\n    gap: 8px; /* 每个操作按钮之间有 8px 的间距 */\r\n  }\r\n}\r\n\r\n/* 产品缩略图 */\r\n.product-thumbnail {\r\n  width: 60px;  /* 设置产品缩略图的宽度为 60px */\r\n  height: 60px; /* 设置产品缩略图的高度为 60px */\r\n}\r\n\r\n/* 产品规范 */\r\n.product-specification {\r\n  color: #888;      /* 设置产品规格的文字颜色为灰色 (颜色代码 #888) */\r\n  font-size: 12px;   /* 设置产品规格文字的字体大小为 12px */\r\n}\r\n\r\n.cart-footer {\r\n  display: flex;  /* 使用 flexbox 布局，子元素将在横向上排列 */\r\n  justify-content: space-between;  /* 子元素之间的空间分布为两端对齐（左对齐，右对齐） */\r\n  align-items: center;  /* 子元素在交叉轴上（垂直方向）对齐居中 */\r\n  padding-top: 20px;  /* 设置顶部的内边距 */\r\n  margin-top: 20px;  /* 设置底部区域与上方元素之间的间距 */\r\n  border-top: 1px solid #eee;  /* 在底部区域上方绘制一条1像素的浅灰色边框 */\r\n}\r\n\r\n.footer-left {\r\n  display: flex;  /* 使左侧区域使用 flexbox 布局 */\r\n  align-items: center;  /* 子元素在左侧区域之间对齐居中 */\r\n  gap: 20px;  /* 子元素之间有间距（20px） */\r\n}\r\n\r\n.footer-right {\r\n  display: flex;  /* 使右侧区域使用 flexbox 布局 */\r\n  align-items: center;  /* 子元素在右侧区域之间对齐居中 */\r\n  gap: 20px;  /* 子元素之间有间距（20px） */\r\n\r\n  .selected-info {\r\n    text-align: right;  /* 使选中的信息右对齐 */\r\n\r\n    span {\r\n      color: #ff6700;  /* 设置文字颜色为橙色 */\r\n      font-weight: bold;  /* 设置文字加粗 */\r\n    }\r\n\r\n    .total-price {\r\n      margin-top: 5px;  /* 设置与上方内容之间的垂直间距 */\r\n      font-size: 16px;  /* 设置总价的字体大小 */\r\n\r\n      span {\r\n        color: #ff6700;  /* 设置总价数字的颜色为橙色 */\r\n        font-size: 24px;  /* 设置总价数字的字体大小 */\r\n      }\r\n    }\r\n  }\r\n\r\n  .el-button {\r\n    padding: 15px 40px;  /* 按钮的样式，增加内边距 */\r\n  }\r\n}\r\n\r\n.cart-summary {\r\n  font-weight: bold;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}