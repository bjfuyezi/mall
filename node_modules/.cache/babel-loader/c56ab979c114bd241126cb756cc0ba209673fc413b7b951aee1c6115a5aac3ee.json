{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport axios from 'axios';\nimport EditAdDialog from '@/components/AdDetailsModal.vue';\nimport AddAd from '@/components/AddAd.vue';\nimport AddBanner from '@/components/AddBanner.vue';\nimport QRCode from 'qrcodejs2';\nexport default {\n  components: {\n    EditAdDialog,\n    AddAd,\n    AddBanner\n  },\n  data() {\n    return {\n      searchKeyword: '',\n      showAddAdModal: false,\n      showBannerModal: false,\n      editDialogVisible: false,\n      reasonDialogVisible: false,\n      // 控制弹窗显示\n      reason: '',\n      // 存储拒绝原因\n      reason_type: '',\n      searchShop: '',\n      searchType: 'name',\n      // 默认为根据名称搜索\n      advertiseStatus: 'all',\n      // 默认为“全部”状态\n      //categories: ['零食小吃', '酒水饮料', '干货腌货', '即食食品', '农产品'],\n      advertises: [],\n      advertiseall: [],\n      currentPage: 1,\n      pageSize: 10,\n      searchButton: false,\n      searchKey: null,\n      currentAd: null,\n      //当前处理的广告\n      totalItems: 0,\n      // 模拟总商品数\n      showPayMethodDialog: false,\n      showPayDialog: false,\n      payMethod: '',\n      payTypeText: '',\n      qrCodeInstance: null,\n      currentPayAmount: 0,\n      currentPay: null\n    };\n  },\n  computed: {\n    // 过滤后的广告\n    filteredAdvertise() {\n      let filtered = this.advertises;\n\n      // 根据广告状态过滤\n      if (this.advertiseStatus !== 'all') {\n        filtered = filtered.filter(advertise => advertise.status === this.advertiseStatus);\n      }\n\n      // 如果有关键词，进行搜索过滤\n      if (this.searchKey) {\n        filtered = filtered.filter(advertise => {\n          if (this.searchType === 'name') {\n            return advertise.name.toLowerCase().includes(this.searchKey.toLowerCase());\n          } else if (this.searchType === 'shop') {\n            return advertise.shop_name.toLowerCase().includes(this.searchKey.toLowerCase());\n          }\n          return false;\n        });\n      }\n      return filtered;\n    }\n  },\n  methods: {\n    getStatusLabel(status) {\n      const statusMap = {\n        pending: '待审核',\n        approved: '已通过',\n        running: '进行中',\n        rejected: '被打回',\n        expired: '已失效'\n      };\n      return statusMap[status] || '未知'; // 如果没有匹配到，显示“未知”\n    },\n    //关闭详情弹窗\n    closeDialog() {\n      alert(\"关闭\");\n      this.editDialogVisible = false; // 关闭弹窗\n      this.currentAd = null;\n    },\n    closeBannerModal() {\n      //alert(\"关闭banner\");\n      this.showBannerModal = false; // 关闭弹窗\n    },\n    closeAddAdModal() {\n      //alert(\"关闭\");\n      this.showAddAdModal = false; // 关闭弹窗\n    },\n    //更新状态\n    async updateAd(adId, status, reason) {\n      console.log(adId, status);\n      try {\n        const response = await axios.post('http://localhost:8081/advertise/status', {\n          advertisement_id: adId,\n          status: status,\n          reason: reason\n        });\n        console.log(response);\n        alert(\"提交成功\");\n        this.fetchAds();\n      } catch (error) {\n        console.error(\"操作出错\", error);\n      }\n    },\n    // 提交原因\n    submitReason() {\n      if (!this.reason) {\n        this.$message.error('请输入拒绝原因');\n        return;\n      }\n      this.updateAd(this.currentAd.advertisement_id, this.reason_type, this.reason);\n      this.reasonDialogVisible = false;\n      this.reason = ''; // 清空输入的原因\n      this.reason_type = '';\n    },\n    async deleteAd(adId) {\n      // 删除广告逻辑\n      console.log(adId);\n      await axios.delete('http://localhost:8081/advertise/del', {\n        params: {\n          id: adId\n        }\n      });\n      this.fetchAds();\n      //console.log('Deleting ad with ID:', adId); // 使用 adId 变量\n    },\n    //显示详情弹窗\n    showAdvertiseDetails(ad) {\n      this.currentAd = ad; // 将选中的广告数据传递给编辑表单\n      this.editDialogVisible = true; // 显示编辑弹窗\n    },\n    toggleAddAdModal() {\n      this.showAddAdModal = true;\n    },\n    toggleBannerModal() {\n      this.showBannerModal = true;\n    },\n    //显示原因弹窗\n    showReasonDialog(ad, type) {\n      this.currentAd = ad; // 保存当前广告信息\n      this.reasonDialogVisible = true; // 显示弹窗\n      this.reason_type = type;\n    },\n    // 重置原因弹窗\n    resetReasonForm() {\n      this.reason = ''; // 关闭弹窗时清空输入框\n      this.reason_type = '';\n      this.reasonDialogVisible = false;\n    },\n    async fetchAds() {\n      // 获取广告列表\n      // 这里可以调用 API 获取广告列表\n      // 示例数据\n      try {\n        const userid = this.$store.getters.userId;\n        const response = await axios.get('http://localhost:8081/advertise/user', {\n          params: {\n            uid: userid\n          }\n        });\n        console.log(response);\n        this.advertiseall = response.data;\n        this.advertises = response.data.slice(0, 10);\n        this.totalItems = response.data.length;\n        console.log(this.totalItems);\n      } catch (error) {\n        console.error(\"There was an error fetching the ads!\", error);\n      }\n      //this.advertises=[{name:\"hah\",shop:\"12\",type:\"a\"},]\n    },\n    searchAdvertise() {\n      if (this.searchKeyword) {\n        this.searchKey = this.searchKeyword;\n      } else {\n        this.searchKey = null;\n      }\n    },\n    handlePageChange(newPage) {\n      this.currentPage = newPage; // 更新当前页\n      this.advertises = this.advertiseall.slice((this.currentPage - 1) * this.pageSize, this.currentPage * this.pageSize);\n    },\n    payOrder(data) {\n      console.log(data);\n      this.currentPay = data;\n      this.currentPayAmount = data.price;\n      this.showPayMethodDialog = true;\n    },\n    async PayMethod(method) {\n      console.log(method);\n      this.payMethod = method;\n      this.payTypeText = method === 'wechat' ? '微信' : '支付宝';\n      this.showPayMethodDialog = false;\n      try {\n        /*// 调用后端接口获取支付链接\r\n        const response = await this.$axios.post('/order/pay', {\r\n          orderId: this.currentPayOrder.id,\r\n          amount: this.currentPayAmount,\r\n          payMethod: method\r\n        });\r\n        \r\n        // 显示支付二维码\r\n        this.showPayDialog = true;\r\n        this.$nextTick(() => {\r\n          this.generateQRCode(response.data.payUrl || 'https://example.com/pay');\r\n        });\r\n        \r\n        // 开始轮询支付状态\r\n        this.startCheckPayStatus(this.currentPayOrder.id);*/\n        this.showPayDialog = true;\n        const testPayUrl = method === 'wechat' ? `weixin://wxpay/bizpayurl?pr=order_${this.currentPayOrder.id}_${this.currentPayAmount}` : `https://qr.alipay.com/pay?order=${this.currentPayOrder.id}&amount=${this.currentPayAmount}`;\n\n        // 在对话框显示后生成二维码，并设置不同的颜色\n        this.$nextTick(() => {\n          this.generateQRCode(testPayUrl, method);\n        });\n      } catch (error) {\n        this.$message.error('创建支付订单失败，请重试');\n        console.error('创建支付订单失败:', error);\n      }\n    },\n    generateQRCode(url, payMethod) {\n      // 清除已存在的二维码\n      if (this.qrCodeInstance) {\n        this.qrCodeInstance.clear();\n      }\n      const qrContainer = this.$refs.qrCode;\n      if (qrContainer) {\n        qrContainer.innerHTML = '';\n        this.qrCodeInstance = new QRCode(qrContainer, {\n          text: url,\n          width: 200,\n          height: 200,\n          colorDark: payMethod === 'wechat' ? '#2C8722' : '#00A0E9',\n          // 微信绿色 vs 支付宝蓝色\n          colorLight: '#ffffff',\n          correctLevel: QRCode.CorrectLevel.H\n        });\n      }\n    },\n    cancelPay() {\n      this.$confirm('确定要取消支付吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.showPayDialog = false;\n        this.stopCheckPayStatus();\n        this.deleteAd(this.currentPay.advertisement_id);\n      }).catch(() => {});\n    },\n    async confirmPay() {\n      try {\n        // 调用后端验证支付状态\n        const response = await this.$axios.post('http://localhost:8081/order/pay', {\n          order_id: this.currentPayOrder.id,\n          payment_method: this.payTypeText\n        });\n        /*\r\n        if (response.data.paid) {\r\n          this.$message.success('支付成功！');\r\n          this.showPayDialog = false;\r\n          // 更新订单状态\r\n          this.currentPayOrder.status = '待发货';\r\n          this.stopCheckPayStatus();\r\n        } else {\r\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\r\n        }*/\n        if (response.status === 201) {\n          this.$message.success('支付成功！');\n          this.showPayDialog = false;\n          // 更新订单状态\n          //this.currentPayOrder.status = '待发货';\n          this.stopCheckPayStatus();\n          this.updateAd(this.currentPay.advertisement_id, 'pending', null); //更新状态为申请状态\n          this.fetchAds();\n        } else {\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\n        }\n      } catch (error) {\n        this.$message.error('验证支付状态失败，请稍后重试');\n        console.error('验证支付失败:', error);\n      }\n    },\n    startCheckPayStatus(orderId) {\n      this.payStatusTimer = setInterval(async () => {\n        try {\n          const response = await this.$axios.get(`/api/payment/status/${orderId}`);\n          if (response.data.paid) {\n            this.$message.success('支付成功！');\n            this.showPayDialog = false;\n            // 更新订单状态\n            this.currentPayOrder.status = '待发货';\n            this.stopCheckPayStatus();\n          }\n        } catch (error) {\n          console.error('检查支付状态失败:', error);\n        }\n      }, 3000); // 每3秒检查一次\n    },\n    stopCheckPayStatus() {\n      if (this.payStatusTimer) {\n        clearInterval(this.payStatusTimer);\n        this.payStatusTimer = null;\n      }\n    }\n  },\n  mounted() {\n    this.fetchAds(); // 获取广告列表\n  }\n};","map":{"version":3,"names":["axios","EditAdDialog","AddAd","AddBanner","QRCode","components","data","searchKeyword","showAddAdModal","showBannerModal","editDialogVisible","reasonDialogVisible","reason","reason_type","searchShop","searchType","advertiseStatus","advertises","advertiseall","currentPage","pageSize","searchButton","searchKey","currentAd","totalItems","showPayMethodDialog","showPayDialog","payMethod","payTypeText","qrCodeInstance","currentPayAmount","currentPay","computed","filteredAdvertise","filtered","filter","advertise","status","name","toLowerCase","includes","shop_name","methods","getStatusLabel","statusMap","pending","approved","running","rejected","expired","closeDialog","alert","closeBannerModal","closeAddAdModal","updateAd","adId","console","log","response","post","advertisement_id","fetchAds","error","submitReason","$message","deleteAd","delete","params","id","showAdvertiseDetails","ad","toggleAddAdModal","toggleBannerModal","showReasonDialog","type","resetReasonForm","userid","$store","getters","userId","get","uid","slice","length","searchAdvertise","handlePageChange","newPage","payOrder","price","PayMethod","method","testPayUrl","currentPayOrder","$nextTick","generateQRCode","url","clear","qrContainer","$refs","qrCode","innerHTML","text","width","height","colorDark","colorLight","correctLevel","CorrectLevel","H","cancelPay","$confirm","confirmButtonText","cancelButtonText","then","stopCheckPayStatus","catch","confirmPay","$axios","order_id","payment_method","success","warning","startCheckPayStatus","orderId","payStatusTimer","setInterval","paid","clearInterval","mounted"],"sources":["src/views/shopmodel/AdManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"ad-management\">\r\n    <h2>广告管理</h2>\r\n\r\n     <!-- 搜索栏和操作按钮（顶部）-->\r\n      <div class=\"search-bar\">\r\n        <div style=\"display: flex; align-items: center;\">\r\n          <!-- 搜索方式选择 -->\r\n          <el-select\r\n            v-model=\"searchType\"\r\n            placeholder=\"请选择搜索方式\"\r\n            style=\"width: 150px; margin-right: 10px;\">\r\n            <el-option label=\"名称\" value=\"name\" />\r\n            <el-option label=\"商铺名\" value=\"shop\" />\r\n          </el-select>\r\n  \r\n          <!-- 搜索框 -->\r\n          <el-input\r\n            v-model=\"searchKeyword\"\r\n            placeholder=\"请输入商品名称或商铺名\"\r\n            style=\"width: 200px; margin-right: 10px;\"\r\n          />\r\n  \r\n          <!-- 搜索按钮 -->\r\n          <el-button @click=\"searchAdvertise\" type=\"primary\">搜索</el-button>\r\n          <!--新增按键-->\r\n          <el-button @click=\"toggleBannerModal\" class=\"add-ad-btn\">添加广告</el-button>\r\n          <el-button @click=\"toggleAddAdModal\" class=\"add-ad-btn\">购买曝光量</el-button>\r\n        </div>\r\n\r\n        <div style=\"margin-top: 10px; display: flex; align-items: center;\">\r\n          <!-- 广告状态选择 -->\r\n          <el-select\r\n            v-model=\"advertiseStatus\"\r\n            placeholder=\"选择广告状态\"\r\n            style=\"width: 200px; margin-right: 10px;\">\r\n            <el-option label=\"全部\" value=\"all\" />\r\n            <el-option label=\"待审核\" value=\"pending\" />\r\n            <el-option label=\"已通过\" value=\"approved\" />\r\n            <el-option label=\"正在进行\" value=\"running\" />\r\n            <el-option label=\"已打回\" value=\"rejected\" />\r\n            <el-option label=\"已失效\" value=\"expired\" />\r\n          </el-select>\r\n        </div>\r\n        <!-- <div style=\"display: flex; align-items: center;\">\r\n            \r\n            <button @click=\"toggleBannerModal\" class=\"add-ad-btn\">添加广告</button>\r\n            <button @click=\"toggleAddAdModal\" class=\"add-ad-btn\">购买曝光量</button>\r\n        </div> -->\r\n      </div>\r\n\r\n    <!-- 使用 el-dialog 替换弹窗 -->\r\n    <el-dialog\r\n      v-model=\"showBannerModal\"\r\n      title=\"添加首页广告\"\r\n      @close=\"closeBannerModal\"\r\n      :visible.sync=\"showBannerModal\"\r\n    >\r\n      <add-banner @close-ad=\"closeBannerModal\" @refresh=\"payOrder\"></add-banner>\r\n    </el-dialog>\r\n\r\n    <!-- 购买曝光量的弹窗 -->\r\n    <el-dialog\r\n      v-model=\"showAddAdModal\"\r\n      title=\"购买曝光量\"\r\n      @close=\"closeAddAdModal\"\r\n      :visible.sync=\"showAddAdModal\"\r\n    >\r\n      <add-ad @close-ad=\"closeAddAdModal\" @refresh=\"payOrder\"></add-ad>\r\n    </el-dialog>\r\n\r\n\r\n    <!-- 商品列表（中部）-->\r\n      <div>\r\n        <el-table :data=\"filteredAdvertise\" style=\"width: 100%\">\r\n          <el-table-column prop=\"name\" label=\"广告名称\" />\r\n          <el-table-column prop=\"shop_name\" label=\"店铺名称\" />\r\n          <el-table-column label=\"广告类型\" >\r\n            <template slot-scope=\"scope\">\r\n                {{ scope.row.advertisement_type === 'shop' ? '店铺推广' : '商品推广'  }}\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column label=\"投放方式\" >\r\n            <template slot-scope=\"scope\">\r\n                {{ scope.row.banner === true ? '首页推广' : '购买曝光量'  }}\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"start_time\" label=\"开始时间\" >\r\n             <template slot-scope=\"scope\">\r\n                {{ scope.row.start_time? new Date(scope.row.start_time).toISOString().split('T')[0] : '暂无'}}\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"end_time\" label=\"结束时间\" >\r\n              <template slot-scope=\"scope\">\r\n                {{ scope.row.end_time? new Date(scope.row.end_time).toISOString().split('T')[0] : '暂无' }}\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"status\" label=\"状态\" >\r\n              <template slot-scope=\"scope\">\r\n    <!-- 根据状态值匹配标签 -->\r\n                {{ getStatusLabel(scope.row.status) }}\r\n              </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"price\" label=\"价格\" />\r\n  \r\n          <el-table-column label=\"操作\" min-width=\"150\">\r\n            <template slot-scope=\"scope\">\r\n              <div style=\"display: flex; justify-content: center; gap: 10px; flex-wrap: nowrap; width: 100%;\">\r\n\r\n              <!-- 强制下线按钮（红色） -->\r\n              <el-button \r\n                v-if=\"scope.row.status === 'approved' || scope.row.status === 'running'\" \r\n                @click=\"updateAd(scope.row.advertisement_id,'expired')\" \r\n                size=\"small\" \r\n                type=\"danger\">\r\n                强制下线\r\n              </el-button>\r\n\r\n              <!-- 详情按钮（蓝色） -->\r\n              <el-button \r\n                @click=\"showAdvertiseDetails(scope.row)\" \r\n                size=\"small\" \r\n                type=\"primary\">\r\n                编辑\r\n              </el-button>\r\n              \r\n              </div>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n  \r\n        <!-- 翻页组件 -->\r\n        <el-pagination\r\n          :current-page=\"currentPage\"\r\n          :page-size=\"pageSize\"\r\n          :total=\"totalItems\"\r\n          @current-change=\"handlePageChange\"\r\n          layout=\"prev, pager, next\"\r\n        />\r\n      </div>\r\n\r\n      <!-- 编辑弹窗组件 -->\r\n      <edit-ad-dialog \r\n        :visible.sync=\"editDialogVisible\"\r\n        :adData=\"currentAd\"\r\n        @close-dialog=\"closeDialog\"\r\n        @refresh=\"fetchAds()\"\r\n      />\r\n\r\n          <!-- 选择支付方式对话框 -->\r\n    <el-dialog\r\n      title=\"选择支付方式\"\r\n      :visible.sync=\"showPayMethodDialog\"\r\n      width=\"300px\"\r\n      center\r\n      :close-on-click-modal=\"false\"\r\n      :close-on-press-escape=\"false\"\r\n      :show-close=\"false\"\r\n    >\r\n      <div class=\"pay-method-content\">\r\n        <el-button class=\"pay-method-btn\" @click=\"PayMethod('wechat')\">\r\n          <i class=\"el-icon-goods\"></i>\r\n          微信支付\r\n        </el-button>\r\n        <el-button class=\"pay-method-btn\" @click=\"PayMethod('alipay')\">\r\n          <i class=\"el-icon-goods\"></i>\r\n          支付宝支付\r\n        </el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n <!-- 添加支付二维码对话框 -->\r\n    <el-dialog\r\n      :title=\"payTypeText\"\r\n      :visible.sync=\"showPayDialog\"\r\n      width=\"300px\"\r\n      center\r\n      :close-on-click-modal=\"false\"\r\n      :close-on-press-escape=\"false\"\r\n      :show-close=\"false\"\r\n    >\r\n      <div class=\"pay-dialog-content\">\r\n        <p class=\"pay-type-text\">{{ payTypeText }}扫码支付</p>\r\n        <div class=\"qr-code\" ref=\"qrCode\"></div>\r\n        <div class=\"pay-amount\">\r\n          支付金额：<span class=\"price\">¥{{ currentPayAmount }}</span>\r\n        </div>\r\n        <div class=\"pay-tips\">\r\n          <p>请使用{{ payTypeText }}扫描二维码完成支付</p>\r\n          <p class=\"small\">支付完成前请不要关闭窗口</p>\r\n        </div>\r\n      </div>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"cancelPay\">取消支付</el-button>\r\n        <el-button type=\"primary\" @click=\"confirmPay\">确认已支付</el-button>\r\n      </div>\r\n    </el-dialog>\r\n    \r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport EditAdDialog from '@/components/AdDetailsModal.vue';\r\nimport AddAd from '@/components/AddAd.vue';\r\nimport AddBanner from '@/components/AddBanner.vue';\r\nimport QRCode from 'qrcodejs2';\r\n\r\nexport default {\r\n  components: {\r\n    EditAdDialog,\r\n    AddAd,\r\n    AddBanner\r\n  },\r\n  data() {\r\n    return {\r\n        searchKeyword: '',\r\n        showAddAdModal: false, \r\n        showBannerModal: false, \r\n        editDialogVisible: false,\r\n        reasonDialogVisible: false, // 控制弹窗显示\r\n        reason: '',          // 存储拒绝原因\r\n        reason_type : '',\r\n        searchShop: '',\r\n        searchType: 'name',  // 默认为根据名称搜索\r\n        advertiseStatus: 'all',  // 默认为“全部”状态\r\n        //categories: ['零食小吃', '酒水饮料', '干货腌货', '即食食品', '农产品'],\r\n        advertises: [],\r\n        advertiseall:[],\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        searchButton: false,\r\n        searchKey:null,\r\n        currentAd:null,//当前处理的广告\r\n        totalItems: 0, // 模拟总商品数\r\n        showPayMethodDialog: false,\r\n      showPayDialog: false,\r\n      payMethod: '',\r\n      payTypeText: '',\r\n      qrCodeInstance: null,\r\n      currentPayAmount: 0,\r\n      currentPay: null\r\n      };\r\n  },\r\n  computed: {\r\n        // 过滤后的广告\r\n            filteredAdvertise() {\r\n      let filtered = this.advertises;\r\n\r\n      // 根据广告状态过滤\r\n      if (this.advertiseStatus !== 'all') {\r\n        filtered = filtered.filter(advertise => advertise.status === this.advertiseStatus);\r\n      }\r\n\r\n      // 如果有关键词，进行搜索过滤\r\n      if (this.searchKey) {\r\n        filtered = filtered.filter(advertise => {\r\n          if (this.searchType === 'name') {\r\n            return advertise.name.toLowerCase().includes(this.searchKey.toLowerCase());\r\n          } else if (this.searchType === 'shop') {\r\n            return advertise.shop_name.toLowerCase().includes(this.searchKey.toLowerCase());\r\n          }\r\n          return false;\r\n        });\r\n      }\r\n\r\n      return filtered;\r\n    }\r\n    },\r\n  methods: {\r\n    getStatusLabel(status) {\r\n    const statusMap = {\r\n      pending: '待审核',\r\n      approved: '已通过',\r\n      running: '进行中',\r\n      rejected: '被打回',\r\n      expired: '已失效'\r\n    };\r\n    return statusMap[status] || '未知'; // 如果没有匹配到，显示“未知”\r\n    },\r\n    //关闭详情弹窗\r\n    closeDialog() {\r\n      alert(\"关闭\");\r\n      this.editDialogVisible = false;  // 关闭弹窗\r\n      this.currentAd = null;\r\n    },\r\n    closeBannerModal() {\r\n      //alert(\"关闭banner\");\r\n      this.showBannerModal = false;  // 关闭弹窗\r\n    },\r\n    closeAddAdModal() {\r\n      //alert(\"关闭\");\r\n      this.showAddAdModal = false;  // 关闭弹窗\r\n    },\r\n    //更新状态\r\n    async updateAd(adId,status,reason){\r\n      console.log(adId,status);\r\n      try {\r\n        const response = await axios.post('http://localhost:8081/advertise/status',{\r\n            advertisement_id: adId,\r\n            status: status,\r\n            reason: reason\r\n            });\r\n        console.log(response);\r\n        alert(\"提交成功\");\r\n        this.fetchAds();\r\n      } catch (error) {\r\n        console.error(\"操作出错\", error);\r\n      }\r\n    },\r\n    // 提交原因\r\n    submitReason() {\r\n    if (!this.reason) {\r\n      this.$message.error('请输入拒绝原因');\r\n      return;\r\n    }\r\n    this.updateAd(this.currentAd.advertisement_id,this.reason_type,this.reason);\r\n\r\n    this.reasonDialogVisible = false;\r\n    this.reason = '';  // 清空输入的原因\r\n    this.reason_type = '';\r\n  },\r\n  async deleteAd(adId) {\r\n      // 删除广告逻辑\r\n      console.log(adId);\r\n      await axios.delete('http://localhost:8081/advertise/del',{\r\n           params: {id: adId}\r\n        });\r\n      this.fetchAds();\r\n      //console.log('Deleting ad with ID:', adId); // 使用 adId 变量\r\n    },\r\n    //显示详情弹窗\r\n    showAdvertiseDetails(ad){\r\n      this.currentAd = ad;  // 将选中的广告数据传递给编辑表单\r\n      this.editDialogVisible = true;  // 显示编辑弹窗\r\n    },\r\n    toggleAddAdModal() {\r\n      this.showAddAdModal = true;\r\n    },\r\n    toggleBannerModal() {\r\n      this.showBannerModal = true;\r\n    },\r\n    //显示原因弹窗\r\n    showReasonDialog(ad,type) {\r\n    this.currentAd = ad;  // 保存当前广告信息\r\n    this.reasonDialogVisible = true; // 显示弹窗\r\n    this.reason_type = type;\r\n    },\r\n    // 重置原因弹窗\r\n    resetReasonForm() {\r\n      this.reason = '';  // 关闭弹窗时清空输入框\r\n      this.reason_type = '';\r\n      this.reasonDialogVisible=false;\r\n    },\r\n    async fetchAds() {\r\n      // 获取广告列表\r\n      // 这里可以调用 API 获取广告列表\r\n      // 示例数据\r\n      try {\r\n        const userid = this.$store.getters.userId;\r\n        const response = await axios.get('http://localhost:8081/advertise/user',{\r\n            params:{\r\n                uid:userid\r\n            }\r\n        });\r\n        console.log(response)\r\n        this.advertiseall = response.data;\r\n        this.advertises = response.data.slice(0,10); \r\n        this.totalItems = response.data.length;\r\n        console.log(this.totalItems);\r\n      } catch (error) {\r\n        console.error(\"There was an error fetching the ads!\", error);\r\n      }\r\n      //this.advertises=[{name:\"hah\",shop:\"12\",type:\"a\"},]\r\n    },\r\n    searchAdvertise() {\r\n      if (this.searchKeyword) {\r\n          this.searchKey=this.searchKeyword\r\n      }else{\r\n        this.searchKey = null\r\n      }\r\n  },\r\n  handlePageChange(newPage) {\r\n      this.currentPage = newPage; // 更新当前页\r\n      this.advertises = this.advertiseall.slice((this.currentPage-1)*this.pageSize,this.currentPage*this.pageSize);\r\n    },\r\n  payOrder(data){\r\n    console.log(data);\r\n    this.currentPay = data;\r\n    this.currentPayAmount = data.price;\r\n    this.showPayMethodDialog = true;\r\n  },\r\n    async PayMethod(method) {\r\n    console.log(method);\r\n      this.payMethod = method;\r\n      this.payTypeText = method === 'wechat' ? '微信' : '支付宝';\r\n      this.showPayMethodDialog = false;\r\n      try {\r\n        /*// 调用后端接口获取支付链接\r\n        const response = await this.$axios.post('/order/pay', {\r\n          orderId: this.currentPayOrder.id,\r\n          amount: this.currentPayAmount,\r\n          payMethod: method\r\n        });\r\n        \r\n        // 显示支付二维码\r\n        this.showPayDialog = true;\r\n        this.$nextTick(() => {\r\n          this.generateQRCode(response.data.payUrl || 'https://example.com/pay');\r\n        });\r\n        \r\n        // 开始轮询支付状态\r\n        this.startCheckPayStatus(this.currentPayOrder.id);*/\r\n        this.showPayDialog = true;\r\n        const testPayUrl = method === 'wechat' \r\n          ? `weixin://wxpay/bizpayurl?pr=order_${this.currentPayOrder.id}_${this.currentPayAmount}` \r\n          : `https://qr.alipay.com/pay?order=${this.currentPayOrder.id}&amount=${this.currentPayAmount}`;\r\n\r\n        // 在对话框显示后生成二维码，并设置不同的颜色\r\n        this.$nextTick(() => {\r\n          this.generateQRCode(testPayUrl, method);\r\n        });\r\n        \r\n      } catch (error) {\r\n        this.$message.error('创建支付订单失败，请重试');\r\n        console.error('创建支付订单失败:', error);\r\n      }\r\n    },\r\n    generateQRCode(url, payMethod) {\r\n      // 清除已存在的二维码\r\n      if (this.qrCodeInstance) {\r\n        this.qrCodeInstance.clear();\r\n      }\r\n      const qrContainer = this.$refs.qrCode;\r\n      if (qrContainer) {\r\n        qrContainer.innerHTML = '';\r\n        this.qrCodeInstance = new QRCode(qrContainer, {\r\n          text: url,\r\n          width: 200,\r\n          height: 200,\r\n          colorDark: payMethod === 'wechat' ? '#2C8722' : '#00A0E9',  // 微信绿色 vs 支付宝蓝色\r\n          colorLight: '#ffffff',\r\n          correctLevel: QRCode.CorrectLevel.H\r\n        });\r\n      }\r\n    },\r\n    cancelPay() {\r\n      this.$confirm('确定要取消支付吗？', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.showPayDialog = false;\r\n        this.stopCheckPayStatus();\r\n        this.deleteAd(this.currentPay.advertisement_id);\r\n      }).catch(() => {});\r\n    },\r\n    async confirmPay() {\r\n      try {\r\n        // 调用后端验证支付状态\r\n        const response = await this.$axios.post('http://localhost:8081/order/pay', {\r\n          order_id: this.currentPayOrder.id,\r\n          payment_method:this.payTypeText\r\n        });\r\n        /*\r\n        if (response.data.paid) {\r\n          this.$message.success('支付成功！');\r\n          this.showPayDialog = false;\r\n          // 更新订单状态\r\n          this.currentPayOrder.status = '待发货';\r\n          this.stopCheckPayStatus();\r\n        } else {\r\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\r\n        }*/\r\n        if (response.status === 201) {\r\n          this.$message.success('支付成功！');\r\n          this.showPayDialog = false;\r\n          // 更新订单状态\r\n          //this.currentPayOrder.status = '待发货';\r\n          this.stopCheckPayStatus();\r\n          this.updateAd(this.currentPay.advertisement_id,'pending',null);//更新状态为申请状态\r\n          this.fetchAds();\r\n        } else {\r\n          this.$message.warning('未检测到支付，请确认是否已完成支付');\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('验证支付状态失败，请稍后重试');\r\n        console.error('验证支付失败:', error);\r\n      }\r\n    },\r\n    startCheckPayStatus(orderId) {\r\n      this.payStatusTimer = setInterval(async () => {\r\n        try {\r\n          const response = await this.$axios.get(`/api/payment/status/${orderId}`);\r\n          if (response.data.paid) {\r\n            this.$message.success('支付成功！');\r\n            this.showPayDialog = false;\r\n            // 更新订单状态\r\n            this.currentPayOrder.status = '待发货';\r\n            this.stopCheckPayStatus();\r\n          }\r\n        } catch (error) {\r\n          console.error('检查支付状态失败:', error);\r\n        }\r\n      }, 3000); // 每3秒检查一次\r\n    },\r\n    stopCheckPayStatus() {\r\n      if (this.payStatusTimer) {\r\n        clearInterval(this.payStatusTimer);\r\n        this.payStatusTimer = null;\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchAds(); // 获取广告列表\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ad-management {\r\n  padding: 10px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}