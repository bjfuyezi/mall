{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'RegisterView',\n  data() {\n    return {\n      registerForm: {\n        email: '',\n        verificationCode: '',\n        username: '',\n        password: '',\n        confirmPassword: '',\n        agreement: false\n      },\n      sendingCode: false,\n      passwordRegex: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/\n    };\n  },\n  methods: {\n    sendVerificationCode() {\n      this.sendingCode = true;\n      axios.post('http://localhost:8081/users/sendCode', {\n        email: this.registerForm.email\n      }).then(() => {\n        this.$message.success('验证码已发送');\n      }).catch(() => {\n        this.$message.error('验证码发送失败');\n      }).finally(() => {\n        this.sendingCode = false;\n      });\n    },\n    validatePassword(password) {\n      return this.passwordRegex.test(password);\n    },\n    handleRegister() {\n      // 校验密码格式\n      if (!this.validatePassword(this.registerForm.password)) {\n        this.$message.error('密码必须包含大小写字母和数字，且长度至少为8位');\n        return;\n      }\n\n      // 校验两次密码是否一致\n      if (this.registerForm.password !== this.registerForm.confirmPassword) {\n        this.$message.error('两次输入的密码不一致');\n        return;\n      }\n\n      // 发送注册请求\n      axios.post(`http://localhost:8081/users/register?code=${this.registerForm.verificationCode}`, this.registerForm).then(() => {\n        this.$message.success('注册成功，请登录');\n        this.$router.push('/login');\n      }).catch(error => {\n        const errorMessage = error.response.data;\n        if (errorMessage.includes('验证码错误')) {\n          this.$message.error('验证码错误，请重新输入');\n        } else if (errorMessage.includes('用户名已存在')) {\n          this.$message.error('用户名已存在，请选择其他用户名');\n        } else if (errorMessage.includes('邮箱已存在')) {\n          this.$message.error('该邮箱已被注册，请选择其他邮箱');\n        } else {\n          this.$message.error('注册失败，请稍后重试');\n        }\n      });\n    }\n  },\n  watch: {\n    'registerForm.password'(newVal) {\n      if (newVal && !this.validatePassword(newVal)) {\n        this.$message.warning('密码必须包含大小写字母和数字，且长度至少为8位');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","registerForm","email","verificationCode","username","password","confirmPassword","agreement","sendingCode","passwordRegex","methods","sendVerificationCode","post","then","$message","success","catch","error","finally","validatePassword","test","handleRegister","$router","push","errorMessage","response","includes","watch","registerForm.password","newVal","warning"],"sources":["src/views/RegisterView.vue"],"sourcesContent":["<template>\r\n  <div class=\"register-page\">\r\n    <div class=\"register-container\">\r\n      <h2>用户注册</h2>\r\n      <form class=\"register-form\" @submit.prevent=\"handleRegister\">\r\n        <!-- 邮箱输入框 -->\r\n        <div class=\"form-group\">\r\n          <label for=\"email\">邮箱</label>\r\n          <input \r\n            type=\"email\" \r\n            id=\"email\" \r\n            v-model=\"registerForm.email\"\r\n            placeholder=\"请输入邮箱\"\r\n          >\r\n          <button \r\n            class=\"send-code-btn\"\r\n            @click.prevent=\"sendVerificationCode\"\r\n            :disabled=\"!registerForm.email || sendingCode\"\r\n          >\r\n            {{ sendingCode ? '发送中...' : '发送验证码' }}\r\n          </button>\r\n        </div>\r\n\r\n        <!-- 验证码输入框 -->\r\n        <div class=\"form-group\">\r\n          <label for=\"verificationCode\">验证码</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"verificationCode\" \r\n            v-model=\"registerForm.verificationCode\"\r\n            placeholder=\"请输入验证码\"\r\n          >\r\n        </div>\r\n\r\n        <!-- 用户名输入框 -->\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">用户名</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"username\" \r\n            v-model=\"registerForm.username\"\r\n            placeholder=\"请输入用户名\"\r\n          >\r\n        </div>\r\n\r\n        <!-- 密码输入框 -->\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">密码</label>\r\n          <input \r\n            type=\"password\" \r\n            id=\"password\" \r\n            v-model=\"registerForm.password\"\r\n            placeholder=\"密码必须包含大小写字母和数字，且长度至少为8位\"\r\n          >\r\n        </div>\r\n\r\n        <!-- 确认密码输入框 -->\r\n        <div class=\"form-group\">\r\n          <label for=\"confirmPassword\">确认密码</label>\r\n          <input \r\n            type=\"password\" \r\n            id=\"confirmPassword\" \r\n            v-model=\"registerForm.confirmPassword\"\r\n            placeholder=\"请再次输入密码\"\r\n          >\r\n        </div>\r\n\r\n        <!-- 用户协议 -->\r\n        <div class=\"form-options\">\r\n          <label class=\"agreement\">\r\n            <input type=\"checkbox\" v-model=\"registerForm.agreement\">\r\n            <span>我已阅读并同意</span>\r\n            <router-link to=\"#\">《用户协议》</router-link>\r\n            和\r\n            <router-link to=\"#\">《隐私政策》</router-link>\r\n          </label>\r\n        </div>\r\n\r\n        <!-- 注册按钮 -->\r\n        <button \r\n          type=\"submit\" \r\n          class=\"register-btn\" \r\n          :disabled=\"!registerForm.agreement\"\r\n        >\r\n          立即注册\r\n        </button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'RegisterView',\r\n  data() {\r\n    return {\r\n      registerForm: {\r\n        email: '',\r\n        verificationCode: '',\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        agreement: false,\r\n      },\r\n      sendingCode: false,\r\n      passwordRegex: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/\r\n    };\r\n  },\r\n  methods: {\r\n    sendVerificationCode() {\r\n      this.sendingCode = true;\r\n      axios.post('http://localhost:8081/users/sendCode', { email: this.registerForm.email })\r\n        .then(() => {\r\n          this.$message.success('验证码已发送');\r\n        })\r\n        .catch(() => {\r\n          this.$message.error('验证码发送失败');\r\n        })\r\n        .finally(() => {\r\n          this.sendingCode = false;\r\n        });\r\n    },\r\n\r\n    validatePassword(password) {\r\n      return this.passwordRegex.test(password);\r\n    },\r\n\r\n    handleRegister() {\r\n      // 校验密码格式\r\n      if (!this.validatePassword(this.registerForm.password)) {\r\n        this.$message.error('密码必须包含大小写字母和数字，且长度至少为8位');\r\n        return;\r\n      }\r\n\r\n      // 校验两次密码是否一致\r\n      if (this.registerForm.password !== this.registerForm.confirmPassword) {\r\n        this.$message.error('两次输入的密码不一致');\r\n        return;\r\n      }\r\n\r\n      // 发送注册请求\r\n      axios.post(`http://localhost:8081/users/register?code=${this.registerForm.verificationCode}`, this.registerForm)\r\n        .then(() => {\r\n          this.$message.success('注册成功，请登录');\r\n          this.$router.push('/login');\r\n        })\r\n        .catch((error) => {\r\n          const errorMessage = error.response.data;\r\n          if (errorMessage.includes('验证码错误')) {\r\n            this.$message.error('验证码错误，请重新输入');\r\n          } else if (errorMessage.includes('用户名已存在')) {\r\n            this.$message.error('用户名已存在，请选择其他用户名');\r\n          } else if (errorMessage.includes('邮箱已存在')) {\r\n            this.$message.error('该邮箱已被注册，请选择其他邮箱');\r\n          } else {\r\n            this.$message.error('注册失败，请稍后重试');\r\n          }\r\n        });\r\n    }\r\n  },\r\n  watch: {\r\n    'registerForm.password'(newVal) {\r\n      if (newVal && !this.validatePassword(newVal)) {\r\n        this.$message.warning('密码必须包含大小写字母和数字，且长度至少为8位');\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.register-page {\r\n  min-height: calc(100vh - 120px);\r\n  background-color: #f5f5f5;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 40px 0;\r\n}\r\n\r\n.register-container {\r\n  background: white;\r\n  padding: 40px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n  width: 100%;\r\n  max-width: 400px;\r\n\r\n  h2 {\r\n    text-align: center;\r\n    margin-bottom: 30px;\r\n    color: #333;\r\n  }\r\n}\r\n\r\n.register-form {\r\n  .form-group {\r\n    margin-bottom: 20px;\r\n\r\n    label {\r\n      display: block;\r\n      margin-bottom: 8px;\r\n      color: #333;\r\n    }\r\n\r\n    input {\r\n      width: calc(100% - 120px);\r\n      padding: 10px;\r\n      border: 1px solid #ddd;\r\n      border-radius: 4px;\r\n      font-size: 14px;\r\n\r\n      &:focus {\r\n        border-color: #ff6700;\r\n        outline: none;\r\n      }\r\n    }\r\n\r\n    .send-code-btn {\r\n      width: 100px;\r\n      padding: 10px;\r\n      margin-left: 10px;\r\n      background-color: #ff6700;\r\n      color: white;\r\n      border: none;\r\n      border-radius: 4px;\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n        background-color: #f85000;\r\n      }\r\n\r\n      &:disabled {\r\n        background-color: #ddd;\r\n        cursor: not-allowed;\r\n      }\r\n    }\r\n  }\r\n\r\n  .form-options {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    margin-bottom: 20px;\r\n\r\n    .agreement {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 5px;\r\n    }\r\n  }\r\n\r\n  .register-btn {\r\n    width: 100%;\r\n    padding: 12px;\r\n    background-color: #ff6700;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      background-color: #f85000;\r\n    }\r\n\r\n    &:disabled {\r\n      background-color: #ddd;\r\n      cursor: not-allowed;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";AA4FA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,YAAA;QACAC,KAAA;QACAC,gBAAA;QACAC,QAAA;QACAC,QAAA;QACAC,eAAA;QACAC,SAAA;MACA;MACAC,WAAA;MACAC,aAAA;IACA;EACA;EACAC,OAAA;IACAC,qBAAA;MACA,KAAAH,WAAA;MACAV,KAAA,CAAAc,IAAA;QAAAV,KAAA,OAAAD,YAAA,CAAAC;MAAA,GACAW,IAAA;QACA,KAAAC,QAAA,CAAAC,OAAA;MACA,GACAC,KAAA;QACA,KAAAF,QAAA,CAAAG,KAAA;MACA,GACAC,OAAA;QACA,KAAAV,WAAA;MACA;IACA;IAEAW,iBAAAd,QAAA;MACA,YAAAI,aAAA,CAAAW,IAAA,CAAAf,QAAA;IACA;IAEAgB,eAAA;MACA;MACA,UAAAF,gBAAA,MAAAlB,YAAA,CAAAI,QAAA;QACA,KAAAS,QAAA,CAAAG,KAAA;QACA;MACA;;MAEA;MACA,SAAAhB,YAAA,CAAAI,QAAA,UAAAJ,YAAA,CAAAK,eAAA;QACA,KAAAQ,QAAA,CAAAG,KAAA;QACA;MACA;;MAEA;MACAnB,KAAA,CAAAc,IAAA,mDAAAX,YAAA,CAAAE,gBAAA,SAAAF,YAAA,EACAY,IAAA;QACA,KAAAC,QAAA,CAAAC,OAAA;QACA,KAAAO,OAAA,CAAAC,IAAA;MACA,GACAP,KAAA,CAAAC,KAAA;QACA,MAAAO,YAAA,GAAAP,KAAA,CAAAQ,QAAA,CAAAzB,IAAA;QACA,IAAAwB,YAAA,CAAAE,QAAA;UACA,KAAAZ,QAAA,CAAAG,KAAA;QACA,WAAAO,YAAA,CAAAE,QAAA;UACA,KAAAZ,QAAA,CAAAG,KAAA;QACA,WAAAO,YAAA,CAAAE,QAAA;UACA,KAAAZ,QAAA,CAAAG,KAAA;QACA;UACA,KAAAH,QAAA,CAAAG,KAAA;QACA;MACA;IACA;EACA;EACAU,KAAA;IACA,uBAAAC,CAAAC,MAAA;MACA,IAAAA,MAAA,UAAAV,gBAAA,CAAAU,MAAA;QACA,KAAAf,QAAA,CAAAgB,OAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}