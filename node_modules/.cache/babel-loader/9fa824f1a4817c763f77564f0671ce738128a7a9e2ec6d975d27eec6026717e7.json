{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport VueSlickCarousel from 'vue-slick-carousel';\nexport default {\n  name: 'HomeView',\n  components: {\n    VueSlickCarousel\n  },\n  data() {\n    return {\n      banners: [],\n      // 存储轮播图的数据\n      products: [],\n      // 存储商品的数据\n      page: 1,\n      // 当前页码\n      loadingMore: false,\n      // 是否正在加载更多商品\n      showBanner: true,\n      bannerOffset: 0,\n      // 新增：用于跟踪广告偏移量\n      categories: [{\n        label: '全部',\n        value: 'all'\n      }, {\n        label: '电子产品',\n        value: 'electronics'\n      }, {\n        label: '家居用品',\n        value: 'household'\n      }, {\n        label: '书籍',\n        value: 'books'\n      }\n      // 添加更多类别...\n      ],\n      settings: {\n        dots: true,\n        infinite: true,\n        speed: 500,\n        // 过渡动画速度\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        autoplay: true,\n        autoplaySpeed: 2000,\n        // 每张图片展示时间，例如5秒\n        lazyLoad: 'ondemand' // 按需懒加载图片\n      },\n      selectedCategory: 'all' // 默认选中的类别\n    };\n  },\n  created() {\n    this.fetchBanners();\n    this.fetchProducts();\n  },\n  methods: {\n    async fetchBanners() {\n      try {\n        const response = await axios.get('http://localhost:8081/advertise/banner');\n        this.banners = response.data;\n\n        // 销毁并重新初始化轮播图\n        this.$nextTick(() => {\n          if (this.$refs.carousel) {\n            this.$refs.carousel.destroy(); // 销毁当前实例\n            this.$nextTick(() => {\n              this.$refs.carousel.init(); // 重新初始化\n              this.$refs.carousel.play(); // 启动自动播放\n            });\n          }\n        });\n      } catch (error) {\n        console.error('获取轮播图失败:', error);\n      }\n    },\n    async fetchProducts() {\n      try {\n        this.loadingMore = true;\n\n        // 动态设置 pageSize\n        const pageSize = this.page === 1 ? 4 : 8;\n        let newProducts = Array.from({\n          length: pageSize\n        }, (element, index) => ({\n          imagePath: 'test.jpg',\n          name: 'aaa',\n          price: '12',\n          id: `${this.page}-${index}` // 确保每个产品有一个唯一的 ID\n        }));\n\n        // 实际请求请取消注释下面的代码，并移除模拟数据部分\n        /*\r\n        const response = await axios.get(`/api/products?page=${this.page}&pageSize=${pageSize}&category=${this.selectedCategory}`);\r\n        newProducts = response.data;\r\n        */\n\n        // 将新获取的商品追加到现有商品列表中\n        this.products.push(...newProducts);\n        if (this.page === 1) {\n          // 如果是第一页，模拟有广告的情况，减少商品数量\n          this.products = this.products.slice(0, 4);\n        }\n        this.page++;\n        this.loadingMore = false;\n      } catch (error) {\n        console.error('获取商品失败:', error);\n        this.loadingMore = false;\n      }\n    },\n    handleScroll() {\n      if (this.$refs.productsSection && !this.loadingMore) {\n        // 计算页面是否接近底部\n        const isNearBottom = window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight - 50;\n        //console.log(window.innerHeight,document.documentElement.scrollTop,document.documentElement.offsetHeight,\"\\n\")\n        // 如果接近页面底部且不在加载状态，则加载更多商品\n        if (isNearBottom) {\n          this.fetchProducts();\n        }\n      }\n    },\n    selectCategory(value) {\n      this.selectedCategory = value;\n      this.page = 1;\n      this.products = []; // 清空现有产品列表\n      this.fetchProducts(); // 请求新类别下的产品\n    },\n    goToDetail(product) {\n      this.$router.push({\n        name: 'product',\n        params: {\n          id: product.id\n        },\n        state: {\n          product\n        }\n      });\n    },\n    logSlideChange(index) {\n      console.log('当前幻灯片索引:', index);\n      console.log('当前幻灯片数据:', this.banners[index]);\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      window.addEventListener('scroll', this.handleScroll);\n\n      // 确保组件已挂载并且所有图片都加载完毕后启动自动播放\n      if (this.$refs.carousel && this.banners.length > 0) {\n        this.$refs.carousel.play();\n      }\n    });\n  },\n  beforeDestroy() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n};","map":{"version":3,"names":["axios","VueSlickCarousel","name","components","data","banners","products","page","loadingMore","showBanner","bannerOffset","categories","label","value","settings","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","lazyLoad","selectedCategory","created","fetchBanners","fetchProducts","methods","response","get","$nextTick","$refs","carousel","destroy","init","play","error","console","pageSize","newProducts","Array","from","length","element","index","imagePath","price","id","push","slice","handleScroll","productsSection","isNearBottom","window","innerHeight","document","documentElement","scrollTop","offsetHeight","selectCategory","goToDetail","product","$router","params","state","logSlideChange","log","mounted","addEventListener","beforeDestroy","removeEventListener"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"home\">\r\n    <div class=\"main-content\">\r\n    <!-- 分类选择器 -->\r\n      <aside class=\"category-sidebar\">\r\n        <h3>选择商品类别</h3>\r\n        <ul>\r\n          <li v-for=\"(category, index) in categories\" :key=\"index\">\r\n            <label>\r\n              <input type=\"radio\" name=\"category\" :value=\"category.value\" @change=\"selectCategory(category.value)\">\r\n              {{ category.label }}\r\n            </label>\r\n          </li>\r\n        </ul>\r\n      </aside>\r\n\r\n      <!-- 轮播广告 -->\r\n      <div class=\"banner\" v-if=\"banners.length\">\r\n        <div class=\"banner-content\">\r\n          <vue-slick-carousel v-bind=\"settings\" @afterChange=\"logSlideChange\">\r\n            <div v-for=\"(slide, index) in banners\" :key=\"index\" class=\"slide\" >\r\n              <img :src=\"`http://localhost:8081${slide.url}`\" alt=\"Slide Image\" />\r\n            </div>\r\n          </vue-slick-carousel>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n\r\n    <!-- 商品展示区域 -->\r\n    <div class=\"products-section\" ref=\"productsSection\">\r\n      <h2>热门商品</h2>\r\n      <div class=\"products-grid\">\r\n        <div class=\"product-card\" v-for=\"product in products\" :key=\"product.id\">\r\n          <div class=\"product-image\">\r\n            <img :src=\"product.imagePath\" alt=\"Product\">\r\n          </div>\r\n          <div class=\"product-info\">\r\n            <h3>{{ product.name }}</h3>\r\n            <p class=\"price\">¥ {{ product.price }}</p>\r\n            <button class=\"buy-now\" @click=\"goToDetail(product)\">立即购买</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div v-if=\"loadingMore\" class=\"loading-more\">加载中...</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.home {\r\n  .main-content {\r\n    display: flex;\r\n    gap: 20px; /* 设置左右元素之间的间距 */\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    padding: 0 15px;\r\n    max-height: 400px;\r\n\r\n    .category-sidebar {\r\n      width: 20%; /* 左侧栏宽度 */\r\n      background-color: #f9f9f9;\r\n      border-radius: 8px;\r\n      padding: 20px;\r\n      box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n\r\n      h3 {\r\n        font-size: 18px;\r\n        color: #333;\r\n        margin-bottom: 15px;\r\n      }\r\n\r\n      ul {\r\n        list-style: none;\r\n        padding: 0;\r\n\r\n        li {\r\n          margin-bottom: 10px;\r\n\r\n          label {\r\n            display: block;\r\n            padding: 5px 10px;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s;\r\n\r\n            &:hover {\r\n              background-color: #f1f1f1;\r\n            }\r\n          }\r\n\r\n          input[type=\"radio\"] {\r\n            margin-right: 10px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .banner {\r\n  flex-grow: 1;\r\n  background-color: #f5f5f5;\r\n  max-height: 400px; // 明确设定最大高度为400px\r\n  max-width: 80%;\r\n  overflow: hidden; // 防止内容溢出\r\n\r\n\r\n.banner-content {\r\n  height: 100%; // 确保 banner 内容占据全部可用空间\r\n}\r\n\r\n.slide {\r\n  height: 100%; /* 每个 slide 占据全部可用空间 */\r\n}\r\n\r\n.slide img {\r\n  width: auto; // 允许宽度根据比例调整\r\n  height: 100%; // 图片占据 slide 的全部高度\r\n  object-fit: cover; // 保证图片被裁剪并覆盖整个区域\r\n  display: block; // 避免底部空白\r\n}\r\n}\r\n  }\r\n\r\n  .products-section {\r\n    max-width: 1200px;\r\n    margin: 30px auto;\r\n    padding: 0 15px;\r\n\r\n    h2 {\r\n      margin-bottom: 20px;\r\n      font-size: 24px;\r\n      color: #333;\r\n    }\r\n\r\n    .products-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(4, 1fr);\r\n      gap: 20px;\r\n    }\r\n\r\n    .product-card {\r\n      background: white;\r\n      border-radius: 8px;\r\n      overflow: hidden;\r\n      box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n      transition: transform 0.3s;\r\n\r\n      &:hover {\r\n        transform: translateY(-5px);\r\n      }\r\n\r\n      .product-image {\r\n        img {\r\n          width: 100%;\r\n          height: auto;\r\n        }\r\n      }\r\n\r\n      .product-info {\r\n        padding: 15px;\r\n        text-align: center;\r\n\r\n        h3 {\r\n          margin-bottom: 10px;\r\n          font-size: 16px;\r\n        }\r\n\r\n        .price {\r\n          color: #ff6700;\r\n          font-size: 18px;\r\n          font-weight: bold;\r\n          margin-bottom: 10px;\r\n        }\r\n\r\n        .buy-now {\r\n          background-color: #ff6700;\r\n          color: white;\r\n          border: none;\r\n          padding: 8px 15px;\r\n          border-radius: 4px;\r\n          cursor: pointer;\r\n\r\n          &:hover {\r\n            background-color: #f85000;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .loading-more {\r\n    text-align: center;\r\n    margin-top: 20px;\r\n    color: #aaa;\r\n  }\r\n}\r\n</style>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport VueSlickCarousel from 'vue-slick-carousel';\r\n\r\nexport default {\r\n  name: 'HomeView',\r\n  components: {\r\n      VueSlickCarousel,\r\n  },\r\n  data() {\r\n    return {\r\n      banners: [], // 存储轮播图的数据\r\n      products: [], // 存储商品的数据\r\n      page: 1, // 当前页码\r\n      loadingMore: false, // 是否正在加载更多商品\r\n      showBanner: true,\r\n      bannerOffset: 0, // 新增：用于跟踪广告偏移量\r\n      categories: [\r\n        { label: '全部', value: 'all' },\r\n        { label: '电子产品', value: 'electronics' },\r\n        { label: '家居用品', value: 'household' },\r\n        { label: '书籍', value: 'books' },\r\n        // 添加更多类别...\r\n      ],\r\nsettings: {\r\n  dots: true,\r\n  infinite: true,\r\n  speed: 500, // 过渡动画速度\r\n  slidesToShow: 1,\r\n  slidesToScroll: 1,\r\n  autoplay: true,\r\n  autoplaySpeed: 2000, // 每张图片展示时间，例如5秒\r\n  lazyLoad: 'ondemand', // 按需懒加载图片\r\n},\r\n      selectedCategory: 'all', // 默认选中的类别\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchBanners();\r\n    this.fetchProducts();\r\n  },\r\n  methods: {\r\n    async fetchBanners() {\r\n  try {\r\n    const response = await axios.get('http://localhost:8081/advertise/banner');\r\n    this.banners = response.data;\r\n\r\n    // 销毁并重新初始化轮播图\r\n    this.$nextTick(() => {\r\n      if (this.$refs.carousel) {\r\n        this.$refs.carousel.destroy(); // 销毁当前实例\r\n        this.$nextTick(() => {\r\n          this.$refs.carousel.init(); // 重新初始化\r\n          this.$refs.carousel.play(); // 启动自动播放\r\n        });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('获取轮播图失败:', error);\r\n  }\r\n},\r\n    async fetchProducts() {\r\n      try {\r\n        this.loadingMore = true;\r\n\r\n        // 动态设置 pageSize\r\n        const pageSize = this.page === 1 ? 4 : 8;\r\n        let newProducts = Array.from({ length: pageSize }, (element, index) => ({\r\n          imagePath: 'test.jpg',\r\n          name: 'aaa',\r\n          price: '12',\r\n          id: `${this.page}-${index}`, // 确保每个产品有一个唯一的 ID\r\n        }));\r\n\r\n        // 实际请求请取消注释下面的代码，并移除模拟数据部分\r\n        /*\r\n        const response = await axios.get(`/api/products?page=${this.page}&pageSize=${pageSize}&category=${this.selectedCategory}`);\r\n        newProducts = response.data;\r\n        */\r\n\r\n        // 将新获取的商品追加到现有商品列表中\r\n        this.products.push(...newProducts);\r\n\r\n        if (this.page === 1) {\r\n          // 如果是第一页，模拟有广告的情况，减少商品数量\r\n          this.products = this.products.slice(0, 4);\r\n        }\r\n\r\n        this.page++;\r\n        this.loadingMore = false;\r\n      } catch (error) {\r\n        console.error('获取商品失败:', error);\r\n        this.loadingMore = false;\r\n      }\r\n    },\r\n    handleScroll() {\r\n      if (this.$refs.productsSection && !this.loadingMore) {\r\n        // 计算页面是否接近底部\r\n        const isNearBottom =\r\n          window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight - 50;\r\n          //console.log(window.innerHeight,document.documentElement.scrollTop,document.documentElement.offsetHeight,\"\\n\")\r\n        // 如果接近页面底部且不在加载状态，则加载更多商品\r\n        if (isNearBottom) {\r\n          this.fetchProducts();\r\n        }\r\n      }\r\n    },\r\n    selectCategory(value) {\r\n      this.selectedCategory = value;\r\n      this.page = 1;\r\n      this.products = []; // 清空现有产品列表\r\n      this.fetchProducts(); // 请求新类别下的产品\r\n    },\r\n    goToDetail(product) {\r\n      this.$router.push({\r\n        name: 'product',\r\n        params: { id: product.id },\r\n        state: { product }\r\n      });\r\n    },logSlideChange(index) {\r\n    console.log('当前幻灯片索引:', index);\r\n    console.log('当前幻灯片数据:', this.banners[index]);\r\n  },\r\n  },\r\n  mounted() {\r\n        this.$nextTick(() => {\r\n      window.addEventListener('scroll', this.handleScroll);\r\n\r\n       // 确保组件已挂载并且所有图片都加载完毕后启动自动播放\r\n    if (this.$refs.carousel && this.banners.length > 0) {\r\n      this.$refs.carousel.play();\r\n    }\r\n    });\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  },\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}